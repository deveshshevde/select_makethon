
motor_control_slave_with_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a0c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007b20  08007b20  00017b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  08007bb8  08007bb8  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bb8  08007bb8  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08007bc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000118  08007cd4  00020118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08007cd4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea63  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  0002eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00031a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e73  00000000  00000000  000327a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe85  00000000  00000000  0004a61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c937  00000000  00000000  0005a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  000e6e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000118 	.word	0x20000118
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b04 	.word	0x08007b04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000011c 	.word	0x2000011c
 800014c:	08007b04 	.word	0x08007b04

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2275      	movs	r2, #117	; 0x75
 8000fde:	21d0      	movs	r1, #208	; 0xd0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f002 fcf7 	bl	80039d4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b68      	cmp	r3, #104	; 0x68
 8000fea:	d13d      	bne.n	8001068 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000ff0:	2364      	movs	r3, #100	; 0x64
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f107 030e 	add.w	r3, r7, #14
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	226b      	movs	r2, #107	; 0x6b
 8001002:	21d0      	movs	r1, #208	; 0xd0
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f002 fbeb 	bl	80037e0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800100a:	2307      	movs	r3, #7
 800100c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	2219      	movs	r2, #25
 8001020:	21d0      	movs	r1, #208	; 0xd0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f002 fbdc 	bl	80037e0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800102c:	2364      	movs	r3, #100	; 0x64
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	f107 030e 	add.w	r3, r7, #14
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2301      	movs	r3, #1
 800103c:	221c      	movs	r2, #28
 800103e:	21d0      	movs	r1, #208	; 0xd0
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f002 fbcd 	bl	80037e0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800104a:	2364      	movs	r3, #100	; 0x64
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 030e 	add.w	r3, r7, #14
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221b      	movs	r2, #27
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f002 fbbe 	bl	80037e0 <HAL_I2C_Mem_Write>
        return 0;
 8001064:	2300      	movs	r3, #0
 8001066:	e000      	b.n	800106a <MPU6050_Init+0xa6>
    }
    return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	0000      	movs	r0, r0
 8001074:	0000      	movs	r0, r0
	...

08001078 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b094      	sub	sp, #80	; 0x50
 800107e:	af04      	add	r7, sp, #16
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	230e      	movs	r3, #14
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	223b      	movs	r2, #59	; 0x3b
 8001096:	21d0      	movs	r1, #208	; 0xd0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f002 fc9b 	bl	80039d4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800109e:	7a3b      	ldrb	r3, [r7, #8]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7a7b      	ldrb	r3, [r7, #9]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80010e2:	7c3b      	ldrb	r3, [r7, #16]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7c7b      	ldrb	r3, [r7, #17]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80010f4:	7cbb      	ldrb	r3, [r7, #18]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001106:	7d3b      	ldrb	r3, [r7, #20]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	7d7b      	ldrb	r3, [r7, #21]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f968 	bl	80003f4 <__aeabi_i2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b95      	ldr	r3, [pc, #596]	; (8001380 <MPU6050_Read_All+0x308>)
 800112a:	f7ff faf7 	bl	800071c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f958 	bl	80003f4 <__aeabi_i2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b8d      	ldr	r3, [pc, #564]	; (8001380 <MPU6050_Read_All+0x308>)
 800114a:	f7ff fae7 	bl	800071c <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f948 	bl	80003f4 <__aeabi_i2d>
 8001164:	a380      	add	r3, pc, #512	; (adr r3, 8001368 <MPU6050_Read_All+0x2f0>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fad7 	bl	800071c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001178:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd5d 	bl	8000c3c <__aeabi_i2f>
 8001182:	4603      	mov	r3, r0
 8001184:	497f      	ldr	r1, [pc, #508]	; (8001384 <MPU6050_Read_All+0x30c>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fe60 	bl	8000e4c <__aeabi_fdiv>
 800118c:	4603      	mov	r3, r0
 800118e:	497e      	ldr	r1, [pc, #504]	; (8001388 <MPU6050_Read_All+0x310>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fc9f 	bl	8000ad4 <__addsf3>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f925 	bl	80003f4 <__aeabi_i2d>
 80011aa:	a371      	add	r3, pc, #452	; (adr r3, 8001370 <MPU6050_Read_All+0x2f8>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff fab4 	bl	800071c <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f915 	bl	80003f4 <__aeabi_i2d>
 80011ca:	a369      	add	r3, pc, #420	; (adr r3, 8001370 <MPU6050_Read_All+0x2f8>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff faa4 	bl	800071c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f905 	bl	80003f4 <__aeabi_i2d>
 80011ea:	a361      	add	r3, pc, #388	; (adr r3, 8001370 <MPU6050_Read_All+0x2f8>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa94 	bl	800071c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80011fe:	f001 f8fb 	bl	80023f8 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	4b61      	ldr	r3, [pc, #388]	; (800138c <MPU6050_Read_All+0x314>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f8e2 	bl	80003d4 <__aeabi_ui2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <MPU6050_Read_All+0x318>)
 8001216:	f7ff fa81 	bl	800071c <__aeabi_ddiv>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001222:	f001 f8e9 	bl	80023f8 <HAL_GetTick>
 8001226:	4603      	mov	r3, r0
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <MPU6050_Read_All+0x314>)
 800122a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	461a      	mov	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	fb03 f202 	mul.w	r2, r3, r2
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001244:	4619      	mov	r1, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800124c:	fb01 f303 	mul.w	r3, r1, r3
 8001250:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f8ce 	bl	80003f4 <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f006 faa9 	bl	80077b6 <sqrt>
 8001264:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001274:	f7ff fb90 	bl	8000998 <__aeabi_dcmpeq>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8b5 	bl	80003f4 <__aeabi_i2d>
 800128a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800128e:	f7ff fa45 	bl	800071c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f006 f8fd 	bl	8007498 <atan>
 800129e:	a336      	add	r3, pc, #216	; (adr r3, 8001378 <MPU6050_Read_All+0x300>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f910 	bl	80004c8 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80012b0:	e005      	b.n	80012be <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c4:	425b      	negs	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f894 	bl	80003f4 <__aeabi_i2d>
 80012cc:	4682      	mov	sl, r0
 80012ce:	468b      	mov	fp, r1
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f88c 	bl	80003f4 <__aeabi_i2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4650      	mov	r0, sl
 80012e2:	4659      	mov	r1, fp
 80012e4:	f006 fa65 	bl	80077b2 <atan2>
 80012e8:	a323      	add	r3, pc, #140	; (adr r3, 8001378 <MPU6050_Read_All+0x300>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f8eb 	bl	80004c8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MPU6050_Read_All+0x31c>)
 8001300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001304:	f7ff fb52 	bl	80009ac <__aeabi_dcmplt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00a      	beq.n	8001324 <MPU6050_Read_All+0x2ac>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MPU6050_Read_All+0x320>)
 800131a:	f7ff fb65 	bl	80009e8 <__aeabi_dcmpgt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d114      	bne.n	800134e <MPU6050_Read_All+0x2d6>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MPU6050_Read_All+0x320>)
 800132a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132e:	f7ff fb5b 	bl	80009e8 <__aeabi_dcmpgt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d033      	beq.n	80013a0 <MPU6050_Read_All+0x328>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MPU6050_Read_All+0x31c>)
 8001344:	f7ff fb32 	bl	80009ac <__aeabi_dcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d028      	beq.n	80013a0 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 800134e:	4913      	ldr	r1, [pc, #76]	; (800139c <MPU6050_Read_All+0x324>)
 8001350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001354:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800135e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001362:	e030      	b.n	80013c6 <MPU6050_Read_All+0x34e>
 8001364:	f3af 8000 	nop.w
 8001368:	00000000 	.word	0x00000000
 800136c:	40ce1d00 	.word	0x40ce1d00
 8001370:	00000000 	.word	0x00000000
 8001374:	40606000 	.word	0x40606000
 8001378:	1a63c1f8 	.word	0x1a63c1f8
 800137c:	404ca5dc 	.word	0x404ca5dc
 8001380:	40d00000 	.word	0x40d00000
 8001384:	43aa0000 	.word	0x43aa0000
 8001388:	42121eb8 	.word	0x42121eb8
 800138c:	20000134 	.word	0x20000134
 8001390:	408f4000 	.word	0x408f4000
 8001394:	c0568000 	.word	0xc0568000
 8001398:	40568000 	.word	0x40568000
 800139c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80013a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013ae:	e9cd 2300 	strd	r2, r3, [sp]
 80013b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <MPU6050_Read_All+0x3b0>)
 80013b8:	f000 f83c 	bl	8001434 <Kalman_getAngle>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80013cc:	4690      	mov	r8, r2
 80013ce:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MPU6050_Read_All+0x3b4>)
 80013d8:	4640      	mov	r0, r8
 80013da:	4649      	mov	r1, r9
 80013dc:	f7ff fb04 	bl	80009e8 <__aeabi_dcmpgt>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013ec:	4614      	mov	r4, r2
 80013ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80013fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001406:	e9cd 2300 	strd	r2, r3, [sp]
 800140a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800140e:	4808      	ldr	r0, [pc, #32]	; (8001430 <MPU6050_Read_All+0x3b8>)
 8001410:	f000 f810 	bl	8001434 <Kalman_getAngle>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800141e:	bf00      	nop
 8001420:	3740      	adds	r7, #64	; 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001428:	20000048 	.word	0x20000048
 800142c:	40568000 	.word	0x40568000
 8001430:	20000000 	.word	0x20000000

08001434 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b092      	sub	sp, #72	; 0x48
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001446:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800144a:	f7fe fe85 	bl	8000158 <__aeabi_dsub>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800145c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001460:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001464:	f7ff f830 	bl	80004c8 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7fe fe74 	bl	800015c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800148a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800148e:	f7ff f81b 	bl	80004c8 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80014a0:	f7fe fe5a 	bl	8000158 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80014b2:	f7fe fe51 	bl	8000158 <__aeabi_dsub>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7fe fe4a 	bl	800015c <__adddf3>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014d4:	f7fe fff8 	bl	80004c8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fe3c 	bl	800015c <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80014fe:	f7fe ffe3 	bl	80004c8 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe25 	bl	8000158 <__aeabi_dsub>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001524:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001528:	f7fe ffce 	bl	80004c8 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fe10 	bl	8000158 <__aeabi_dsub>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	68f9      	ldr	r1, [r7, #12]
 800153e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800154e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001552:	f7fe ffb9 	bl	80004c8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fdfd 	bl	800015c <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001578:	f7fe fdf0 	bl	800015c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800158a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800158e:	f7ff f8c5 	bl	800071c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80015a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015a4:	f7ff f8ba 	bl	800071c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015ba:	f7fe fdcd 	bl	8000158 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015d4:	f7fe ff78 	bl	80004c8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fdbc 	bl	800015c <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80015f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015fc:	f7fe ff64 	bl	80004c8 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fda8 	bl	800015c <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800161c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001626:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001638:	f7fe ff46 	bl	80004c8 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fd88 	bl	8000158 <__aeabi_dsub>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	68f9      	ldr	r1, [r7, #12]
 800164e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001658:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001660:	f7fe ff32 	bl	80004c8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4620      	mov	r0, r4
 800166a:	4629      	mov	r1, r5
 800166c:	f7fe fd74 	bl	8000158 <__aeabi_dsub>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001680:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001688:	f7fe ff1e 	bl	80004c8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fd60 	bl	8000158 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b0:	f7fe ff0a 	bl	80004c8 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7fe fd4c 	bl	8000158 <__aeabi_dsub>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	3748      	adds	r7, #72	; 0x48
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	0000      	movs	r0, r0
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <PID>:
// }

float deltaT;

uint16_t PID()
{
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	af00      	add	r7, sp, #0

	ctime = micros();
 80016e6:	f000 f8e3 	bl	80018b0 <micros>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a60      	ldr	r2, [pc, #384]	; (8001870 <PID+0x190>)
 80016ee:	6013      	str	r3, [r2, #0]
	deltaT = (ctime - ptime);
 80016f0:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <PID+0x190>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <PID+0x194>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fa9e 	bl	8000c3c <__aeabi_i2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4a5d      	ldr	r2, [pc, #372]	; (8001878 <PID+0x198>)
 8001704:	6013      	str	r3, [r2, #0]
	ptime = ctime;
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <PID+0x190>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <PID+0x194>)
 800170c:	6013      	str	r3, [r2, #0]
	error = targetspeed - speed;
 800170e:	4b5b      	ldr	r3, [pc, #364]	; (800187c <PID+0x19c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fa92 	bl	8000c3c <__aeabi_i2f>
 8001718:	4602      	mov	r2, r0
 800171a:	4b59      	ldr	r3, [pc, #356]	; (8001880 <PID+0x1a0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f7ff f9d5 	bl	8000ad0 <__aeabi_fsub>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b56      	ldr	r3, [pc, #344]	; (8001884 <PID+0x1a4>)
 800172c:	601a      	str	r2, [r3, #0]
//	dt = .001;
	deri = (error - lasterror)/(deltaT*0.0002666667);
 800172e:	4b55      	ldr	r3, [pc, #340]	; (8001884 <PID+0x1a4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a55      	ldr	r2, [pc, #340]	; (8001888 <PID+0x1a8>)
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f9c9 	bl	8000ad0 <__aeabi_fsub>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe69 	bl	8000418 <__aeabi_f2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <PID+0x198>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe62 	bl	8000418 <__aeabi_f2d>
 8001754:	a344      	add	r3, pc, #272	; (adr r3, 8001868 <PID+0x188>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe feb5 	bl	80004c8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe ffd9 	bl	800071c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f959 	bl	8000a28 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	4a44      	ldr	r2, [pc, #272]	; (800188c <PID+0x1ac>)
 800177a:	6013      	str	r3, [r2, #0]
	integral += error * (deltaT*0.0002666667);
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <PID+0x1b0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe49 	bl	8000418 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <PID+0x1a4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fe42 	bl	8000418 <__aeabi_f2d>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <PID+0x198>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fe3b 	bl	8000418 <__aeabi_f2d>
 80017a2:	a331      	add	r3, pc, #196	; (adr r3, 8001868 <PID+0x188>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe fe8e 	bl	80004c8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4640      	mov	r0, r8
 80017b2:	4649      	mov	r1, r9
 80017b4:	f7fe fe88 	bl	80004c8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fccc 	bl	800015c <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f92c 	bl	8000a28 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <PID+0x1b0>)
 80017d4:	6013      	str	r3, [r2, #0]
	iout = ki*integral;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <PID+0x1b4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <PID+0x1b0>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fa7f 	bl	8000ce4 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <PID+0x1b8>)
 80017ec:	601a      	str	r2, [r3, #0]
	dout = kd*deri;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <PID+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <PID+0x1ac>)
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fa73 	bl	8000ce4 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <PID+0x1c0>)
 8001804:	601a      	str	r2, [r3, #0]
	pout = kp*error;
 8001806:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <PID+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <PID+0x1a4>)
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa67 	bl	8000ce4 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <PID+0x1c8>)
 800181c:	601a      	str	r2, [r3, #0]
	output = pout + iout + dout;
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <PID+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <PID+0x1b8>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f953 	bl	8000ad4 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <PID+0x1c0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7ff f94b 	bl	8000ad4 <__addsf3>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <PID+0x1cc>)
 8001844:	601a      	str	r2, [r3, #0]
	lasterror = error;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <PID+0x1a4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <PID+0x1a8>)
 800184c:	6013      	str	r3, [r2, #0]

return output;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <PID+0x1cc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fb96 	bl	8000f84 <__aeabi_f2uiz>
 8001858:	4603      	mov	r3, r0
 800185a:	b29b      	uxth	r3, r3


}
 800185c:	4618      	mov	r0, r3
 800185e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	c16401eb 	.word	0xc16401eb
 800186c:	3f3179ec 	.word	0x3f3179ec
 8001870:	20000170 	.word	0x20000170
 8001874:	20000174 	.word	0x20000174
 8001878:	20000304 	.word	0x20000304
 800187c:	2000009c 	.word	0x2000009c
 8001880:	20000144 	.word	0x20000144
 8001884:	20000148 	.word	0x20000148
 8001888:	20000154 	.word	0x20000154
 800188c:	20000150 	.word	0x20000150
 8001890:	2000014c 	.word	0x2000014c
 8001894:	20000094 	.word	0x20000094
 8001898:	20000160 	.word	0x20000160
 800189c:	20000098 	.word	0x20000098
 80018a0:	2000015c 	.word	0x2000015c
 80018a4:	20000090 	.word	0x20000090
 80018a8:	20000158 	.word	0x20000158
 80018ac:	20000164 	.word	0x20000164

080018b0 <micros>:

int micros(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
  uint32_t m0 = HAL_GetTick();
 80018b6:	f000 fd9f 	bl	80023f8 <HAL_GetTick>
 80018ba:	60f8      	str	r0, [r7, #12]
  uint32_t u0 = SysTick->LOAD - SysTick->VAL;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <micros+0x78>)
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <micros+0x78>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	60bb      	str	r3, [r7, #8]
  uint32_t m1 = HAL_GetTick();
 80018c8:	f000 fd96 	bl	80023f8 <HAL_GetTick>
 80018cc:	6078      	str	r0, [r7, #4]
  uint32_t u1 = SysTick->LOAD - SysTick->VAL;
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <micros+0x78>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <micros+0x78>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	603b      	str	r3, [r7, #0]

  if (m1 > m0) {
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90f      	bls.n	8001902 <micros+0x52>
    return ( m1 * 1000 + (u1 * 1000) / SysTick->LOAD);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e8:	fb03 f202 	mul.w	r2, r3, r2
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018f2:	fb03 f101 	mul.w	r1, r3, r1
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <micros+0x78>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	e00e      	b.n	8001920 <micros+0x70>
  } else {
    return ( m0 * 1000 + (u0 * 1000) / SysTick->LOAD);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001908:	fb03 f202 	mul.w	r2, r3, r2
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001912:	fb03 f101 	mul.w	r1, r3, r1
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <micros+0x78>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	fbb1 f3f3 	udiv	r3, r1, r3
 800191e:	4413      	add	r3, r2
  }
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_1 )
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d104      	bne.n	8001946 <HAL_GPIO_EXTI_Callback+0x1a>
    {
    Eticks++;
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_GPIO_EXTI_Callback+0x24>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a03      	ldr	r2, [pc, #12]	; (8001950 <HAL_GPIO_EXTI_Callback+0x24>)
 8001944:	6013      	str	r3, [r2, #0]
    }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000138 	.word	0x20000138
 8001954:	00000000 	.word	0x00000000

08001958 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	change_of_ang = ((Eticks - old_ticks)*(0.361));
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd42 	bl	80003f4 <__aeabi_i2d>
 8001970:	a317      	add	r3, pc, #92	; (adr r3, 80019d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fda7 	bl	80004c8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f851 	bl	8000a28 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800198a:	6013      	str	r3, [r2, #0]

	speed = change_of_ang * 10 * .1666 ;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f9a6 	bl	8000ce4 <__aeabi_fmul>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fd3c 	bl	8000418 <__aeabi_f2d>
 80019a0:	a30d      	add	r3, pc, #52	; (adr r3, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fd8f 	bl	80004c8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f839 	bl	8000a28 <__aeabi_d2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019ba:	6013      	str	r3, [r2, #0]


	old_ticks = Eticks;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019c2:	6013      	str	r3, [r2, #0]
//    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	f3af 8000 	nop.w
 80019d0:	be76c8b4 	.word	0xbe76c8b4
 80019d4:	3fd71a9f 	.word	0x3fd71a9f
 80019d8:	17c1bda5 	.word	0x17c1bda5
 80019dc:	3fc55326 	.word	0x3fc55326
 80019e0:	20000138 	.word	0x20000138
 80019e4:	2000013c 	.word	0x2000013c
 80019e8:	20000140 	.word	0x20000140
 80019ec:	41200000 	.word	0x41200000
 80019f0:	20000144 	.word	0x20000144

080019f4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
//	 count++;
	 datacheck = 100;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	601a      	str	r2, [r3, #0]
//	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rxdata);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001a06:	2100      	movs	r1, #0
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 ff07 	bl	800281c <HAL_CAN_GetRxMessage>
	 if(Rxheader.DLC == 2){
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d102      	bne.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		 datacheck = 100;
 8001a16:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001a18:	2264      	movs	r2, #100	; 0x64
 8001a1a:	601a      	str	r2, [r3, #0]
	 }

 }
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200000a0 	.word	0x200000a0
 8001a28:	20000168 	.word	0x20000168
 8001a2c:	200002e4 	.word	0x200002e4

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fc88 	bl	8002348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f864 	bl	8001b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f000 fa16 	bl	8001e6c <MX_GPIO_Init>
  MX_CAN_Init();
 8001a40:	f000 f8a6 	bl	8001b90 <MX_CAN_Init>
  MX_TIM1_Init();
 8001a44:	f000 f924 	bl	8001c90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a48:	f000 f9c2 	bl	8001dd0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a4c:	f000 f8f2 	bl	8001c34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001a50:	4821      	ldr	r0, [pc, #132]	; (8001ad8 <main+0xa8>)
 8001a52:	f004 fd8d 	bl	8006570 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan);
 8001a56:	4821      	ldr	r0, [pc, #132]	; (8001adc <main+0xac>)
 8001a58:	f000 fe9c 	bl	8002794 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	481f      	ldr	r0, [pc, #124]	; (8001adc <main+0xac>)
 8001a60:	f000 ffed 	bl	8002a3e <HAL_CAN_ActivateNotification>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a64:	2100      	movs	r1, #0
 8001a66:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <main+0xb0>)
 8001a68:	f004 fe2c 	bl	80066c4 <HAL_TIM_PWM_Start>


  MPU6050_Init(&hi2c1);
 8001a6c:	481d      	ldr	r0, [pc, #116]	; (8001ae4 <main+0xb4>)
 8001a6e:	f7ff faa9 	bl	8000fc4 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	   data = PID();
 8001a72:	f7ff fe35 	bl	80016e0 <PID>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <main+0xb8>)
 8001a7c:	801a      	strh	r2, [r3, #0]
//if(datacheck==100){

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2104      	movs	r1, #4
 8001a82:	481a      	ldr	r0, [pc, #104]	; (8001aec <main+0xbc>)
 8001a84:	f001 fd38 	bl	80034f8 <HAL_GPIO_WritePin>

		  TIM1->CCR1 = data;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <main+0xb8>)
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <main+0xc0>)
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34

		  if(data>255){
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <main+0xb8>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2bff      	cmp	r3, #255	; 0xff
 8001a96:	d902      	bls.n	8001a9e <main+0x6e>
			  TIM1->CCR1 = 255;
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <main+0xc0>)
 8001a9a:	22ff      	movs	r2, #255	; 0xff
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  if(data < 8){
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <main+0xb8>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	2b07      	cmp	r3, #7
 8001aa4:	d802      	bhi.n	8001aac <main+0x7c>
			  TIM1->CCR1 = 0;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <main+0xc0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34
		  }

		  mpuctime = micros();
 8001aac:	f7ff ff00 	bl	80018b0 <micros>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <main+0xc4>)
 8001ab4:	6013      	str	r3, [r2, #0]

		  if(mpuctime - mpuptime >= 150000){
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <main+0xc4>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <main+0xc8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <main+0xcc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	ddd5      	ble.n	8001a72 <main+0x42>
			  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001ac6:	490e      	ldr	r1, [pc, #56]	; (8001b00 <main+0xd0>)
 8001ac8:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <main+0xb4>)
 8001aca:	f7ff fad5 	bl	8001078 <MPU6050_Read_All>
			  mpuptime =  mpuctime;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <main+0xc4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <main+0xc8>)
 8001ad4:	6013      	str	r3, [r2, #0]
	   data = PID();
 8001ad6:	e7cc      	b.n	8001a72 <main+0x42>
 8001ad8:	2000029c 	.word	0x2000029c
 8001adc:	200001d8 	.word	0x200001d8
 8001ae0:	20000254 	.word	0x20000254
 8001ae4:	20000200 	.word	0x20000200
 8001ae8:	20000300 	.word	0x20000300
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	20000178 	.word	0x20000178
 8001af8:	2000017c 	.word	0x2000017c
 8001afc:	000249ef 	.word	0x000249ef
 8001b00:	20000180 	.word	0x20000180

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b090      	sub	sp, #64	; 0x40
 8001b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 0318 	add.w	r3, r7, #24
 8001b0e:	2228      	movs	r2, #40	; 0x28
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fcb6 	bl	8007484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 f8b9 	bl	8005cc4 <HAL_RCC_OscConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b58:	f000 fa0a 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b60:	2302      	movs	r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2102      	movs	r1, #2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fb26 	bl	80061c8 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b82:	f000 f9f5 	bl	8001f70 <Error_Handler>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3740      	adds	r7, #64	; 0x40
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b96:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <MX_CAN_Init+0xa0>)
 8001b9a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 22;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001b9e:	2216      	movs	r2, #22
 8001ba0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bbc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001be2:	4812      	ldr	r0, [pc, #72]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001be4:	f000 fc12 	bl	800240c <HAL_CAN_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001bee:	f000 f9bf 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10; // which filter bank to use from the assigned ones
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh =  0x001<<5;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh =  0x001<<5;
 8001c06:	2320      	movs	r3, #32
 8001c08:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST ;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank =  1; // how many filters to assign to the CAN1 (master can)
 8001c16:	2301      	movs	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <MX_CAN_Init+0x9c>)
 8001c20:	f000 fcef 	bl	8002602 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200001d8 	.word	0x200001d8
 8001c30:	40006400 	.word	0x40006400

08001c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <MX_I2C1_Init+0x54>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <MX_I2C1_Init+0x58>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_I2C1_Init+0x50>)
 8001c72:	f001 fc71 	bl	8003558 <HAL_I2C_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c7c:	f000 f978 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000200 	.word	0x20000200
 8001c88:	40005400 	.word	0x40005400
 8001c8c:	00061a80 	.word	0x00061a80

08001c90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b096      	sub	sp, #88	; 0x58
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]
 8001cc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f005 fbdb 	bl	8007484 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cd0:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <MX_TIM1_Init+0x13c>)
 8001cd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cd6:	2247      	movs	r2, #71	; 0x47
 8001cd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001ce2:	2263      	movs	r2, #99	; 0x63
 8001ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001cfa:	f004 fbe9 	bl	80064d0 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d04:	f000 f934 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d12:	4619      	mov	r1, r3
 8001d14:	482c      	ldr	r0, [pc, #176]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001d16:	f004 ff3d 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001d20:	f000 f926 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d24:	4828      	ldr	r0, [pc, #160]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001d26:	f004 fc75 	bl	8006614 <HAL_TIM_PWM_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001d30:	f000 f91e 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d40:	4619      	mov	r1, r3
 8001d42:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001d44:	f005 fab2 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001d4e:	f000 f90f 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	2200      	movs	r2, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4814      	ldr	r0, [pc, #80]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001d78:	f004 fe4e 	bl	8006a18 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001d82:	f000 f8f5 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001daa:	f005 fadd 	bl	8007368 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001db4:	f000 f8dc 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM1_Init+0x138>)
 8001dba:	f000 f9fb 	bl	80021b4 <HAL_TIM_MspPostInit>

}
 8001dbe:	bf00      	nop
 8001dc0:	3758      	adds	r7, #88	; 0x58
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000254 	.word	0x20000254
 8001dcc:	40012c00 	.word	0x40012c00

08001dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e04:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e18:	f004 fb5a 	bl	80064d0 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e22:	f000 f8a5 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e34:	f004 feae 	bl	8006b94 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e3e:	f000 f897 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e50:	f005 fa2c 	bl	80072ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e5a:	f000 f889 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000029c 	.word	0x2000029c

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001e86:	f043 0310 	orr.w	r3, r3, #16
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_GPIO_Init+0xf4>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee6:	481f      	ldr	r0, [pc, #124]	; (8001f64 <MX_GPIO_Init+0xf8>)
 8001ee8:	f001 fb06 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	210c      	movs	r1, #12
 8001ef0:	481d      	ldr	r0, [pc, #116]	; (8001f68 <MX_GPIO_Init+0xfc>)
 8001ef2:	f001 fb01 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <MX_GPIO_Init+0xf8>)
 8001f10:	f001 f96e 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_GPIO_Init+0x100>)
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	4619      	mov	r1, r3
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <MX_GPIO_Init+0xfc>)
 8001f28:	f001 f962 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4619      	mov	r1, r3
 8001f42:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_GPIO_Init+0xfc>)
 8001f44:	f001 f954 	bl	80031f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2007      	movs	r0, #7
 8001f4e:	f001 f896 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f52:	2007      	movs	r0, #7
 8001f54:	f001 f8af 	bl	80030b6 <HAL_NVIC_EnableIRQ>

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	10310000 	.word	0x10310000

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6193      	str	r3, [r2, #24]
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_MspInit+0x60>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_MspInit+0x60>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <HAL_CAN_MspInit+0xcc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d151      	bne.n	80020a4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 8002006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_CAN_MspInit+0xd0>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002034:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	4619      	mov	r1, r3
 8002044:	481b      	ldr	r0, [pc, #108]	; (80020b4 <HAL_CAN_MspInit+0xd4>)
 8002046:	f001 f8d3 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	4815      	ldr	r0, [pc, #84]	; (80020b4 <HAL_CAN_MspInit+0xd4>)
 8002060:	f001 f8c6 	bl	80031f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2013      	movs	r0, #19
 800206a:	f001 f808 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800206e:	2013      	movs	r0, #19
 8002070:	f001 f821 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	2014      	movs	r0, #20
 800207a:	f001 f800 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800207e:	2014      	movs	r0, #20
 8002080:	f001 f819 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2015      	movs	r0, #21
 800208a:	f000 fff8 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800208e:	2015      	movs	r0, #21
 8002090:	f001 f811 	bl	80030b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2016      	movs	r0, #22
 800209a:	f000 fff0 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800209e:	2016      	movs	r0, #22
 80020a0:	f001 f809 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40006400 	.word	0x40006400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010800 	.word	0x40010800

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_I2C_MspInit+0x80>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_I2C_MspInit+0x84>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_I2C_MspInit+0x84>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_I2C_MspInit+0x84>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f0:	23c0      	movs	r3, #192	; 0xc0
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	480f      	ldr	r0, [pc, #60]	; (8002140 <HAL_I2C_MspInit+0x88>)
 8002104:	f001 f874 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_I2C_MspInit+0x84>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_I2C_MspInit+0x84>)
 800210e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_I2C_MspInit+0x84>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	201f      	movs	r0, #31
 8002126:	f000 ffaa 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800212a:	201f      	movs	r0, #31
 800212c:	f000 ffc3 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40005400 	.word	0x40005400
 800213c:	40021000 	.word	0x40021000
 8002140:	40010c00 	.word	0x40010c00

08002144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a16      	ldr	r2, [pc, #88]	; (80021ac <HAL_TIM_Base_MspInit+0x68>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10c      	bne.n	8002170 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 800215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002160:	6193      	str	r3, [r2, #24]
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800216e:	e018      	b.n	80021a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002178:	d113      	bne.n	80021a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	61d3      	str	r3, [r2, #28]
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_TIM_Base_MspInit+0x6c>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	201c      	movs	r0, #28
 8002198:	f000 ff71 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800219c:	201c      	movs	r0, #28
 800219e:	f000 ff8a 	bl	80030b6 <HAL_NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_TIM_MspPostInit+0x5c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d118      	bne.n	8002206 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_TIM_MspPostInit+0x60>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_TIM_MspPostInit+0x60>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_TIM_MspPostInit+0x60>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_TIM_MspPostInit+0x64>)
 8002202:	f000 fff5 	bl	80031f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40010800 	.word	0x40010800

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <NMI_Handler+0x4>

08002222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002226:	e7fe      	b.n	8002226 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	e7fe      	b.n	800222c <MemManage_Handler+0x4>

0800222e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <UsageFault_Handler+0x4>

0800223a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f8b7 	bl	80023d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}

0800226a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800226e:	2002      	movs	r0, #2
 8002270:	f001 f95a 	bl	8003528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800227e:	f000 fc03 	bl	8002a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200001d8 	.word	0x200001d8

0800228c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002292:	f000 fbf9 	bl	8002a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001d8 	.word	0x200001d8

080022a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <CAN1_RX1_IRQHandler+0x10>)
 80022a6:	f000 fbef 	bl	8002a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200001d8 	.word	0x200001d8

080022b4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <CAN1_SCE_IRQHandler+0x10>)
 80022ba:	f000 fbe5 	bl	8002a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200001d8 	.word	0x200001d8

080022c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM2_IRQHandler+0x10>)
 80022ce:	f004 fa9b 	bl	8006808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000029c 	.word	0x2000029c

080022dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <I2C1_EV_IRQHandler+0x10>)
 80022e2:	f001 fddf 	bl	8003ea4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000200 	.word	0x20000200

080022f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022fe:	490d      	ldr	r1, [pc, #52]	; (8002334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002314:	4c0a      	ldr	r4, [pc, #40]	; (8002340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002322:	f7ff ffe5 	bl	80022f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002326:	f005 f889 	bl	800743c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800232a:	f7ff fb81 	bl	8001a30 <main>
  bx lr
 800232e:	4770      	bx	lr
  ldr r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002334:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002338:	08007bc0 	.word	0x08007bc0
  ldr r2, =_sbss
 800233c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002340:	2000030c 	.word	0x2000030c

08002344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC1_2_IRQHandler>
	...

08002348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_Init+0x28>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_Init+0x28>)
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002358:	2003      	movs	r0, #3
 800235a:	f000 fe85 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235e:	200f      	movs	r0, #15
 8002360:	f000 f808 	bl	8002374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002364:	f7ff fe0a 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000

08002374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_InitTick+0x54>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_InitTick+0x58>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238a:	fbb3 f3f1 	udiv	r3, r3, r1
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe9d 	bl	80030d2 <HAL_SYSTICK_Config>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e00e      	b.n	80023c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d80a      	bhi.n	80023be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b0:	f000 fe65 	bl	800307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <HAL_InitTick+0x5c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200000a4 	.word	0x200000a4
 80023cc:	200000ac 	.word	0x200000ac
 80023d0:	200000a8 	.word	0x200000a8

080023d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_IncTick+0x1c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_IncTick+0x20>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_IncTick+0x20>)
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	200000ac 	.word	0x200000ac
 80023f4:	20000308 	.word	0x20000308

080023f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_GetTick+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000308 	.word	0x20000308

0800240c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0ed      	b.n	80025fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fdd8 	bl	8001fe0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff ffda 	bl	80023f8 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002446:	e012      	b.n	800246e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002448:	f7ff ffd6 	bl	80023f8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d90b      	bls.n	800246e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0c5      	b.n	80025fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0e5      	beq.n	8002448 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0202 	bic.w	r2, r2, #2
 800248a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248c:	f7ff ffb4 	bl	80023f8 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002492:	e012      	b.n	80024ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002494:	f7ff ffb0 	bl	80023f8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d90b      	bls.n	80024ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2205      	movs	r2, #5
 80024b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e09f      	b.n	80025fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e5      	bne.n	8002494 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e5b      	ldrb	r3, [r3, #25]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e9b      	ldrb	r3, [r3, #26]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0220 	orr.w	r2, r2, #32
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0220 	bic.w	r2, r2, #32
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7edb      	ldrb	r3, [r3, #27]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0210 	bic.w	r2, r2, #16
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0210 	orr.w	r2, r2, #16
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7f1b      	ldrb	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7f5b      	ldrb	r3, [r3, #29]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0204 	orr.w	r2, r2, #4
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002602:	b480      	push	{r7}
 8002604:	b087      	sub	sp, #28
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d003      	beq.n	8002628 <HAL_CAN_ConfigFilter+0x26>
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b02      	cmp	r3, #2
 8002624:	f040 80aa 	bne.w	800277c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2201      	movs	r2, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	43db      	mvns	r3, r3
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d123      	bne.n	80026aa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	401a      	ands	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002684:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3248      	adds	r2, #72	; 0x48
 800268a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800269e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a0:	6979      	ldr	r1, [r7, #20]
 80026a2:	3348      	adds	r3, #72	; 0x48
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d122      	bne.n	80026f8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3248      	adds	r2, #72	; 0x48
 80026d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ee:	6979      	ldr	r1, [r7, #20]
 80026f0:	3348      	adds	r3, #72	; 0x48
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002712:	e007      	b.n	8002724 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800273e:	e007      	b.n	8002750 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276e:	f023 0201 	bic.w	r2, r3, #1
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e006      	b.n	800278a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d12e      	bne.n	8002806 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c0:	f7ff fe1a 	bl	80023f8 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027c6:	e012      	b.n	80027ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027c8:	f7ff fe16 	bl	80023f8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b0a      	cmp	r3, #10
 80027d4:	d90b      	bls.n	80027ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e012      	b.n	8002814 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e006      	b.n	8002814 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
  }
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002830:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d003      	beq.n	8002840 <HAL_CAN_GetRxMessage+0x24>
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 80f3 	bne.w	8002a26 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0e7      	b.n	8002a34 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0d8      	b.n	8002a34 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	331b      	adds	r3, #27
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0204 	and.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10c      	bne.n	80028ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	331b      	adds	r3, #27
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e00b      	b.n	80028d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	331b      	adds	r3, #27
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	331b      	adds	r3, #27
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0202 	and.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	331b      	adds	r3, #27
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	331b      	adds	r3, #27
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2da      	uxtb	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0a1a      	lsrs	r2, r3, #8
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0c1a      	lsrs	r2, r3, #16
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3302      	adds	r3, #2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e1a      	lsrs	r2, r3, #24
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3303      	adds	r3, #3
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4413      	add	r3, r2
 800299e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3304      	adds	r3, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0a1a      	lsrs	r2, r3, #8
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3305      	adds	r3, #5
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0c1a      	lsrs	r2, r3, #16
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3306      	adds	r3, #6
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e1a      	lsrs	r2, r3, #24
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	3307      	adds	r3, #7
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0220 	orr.w	r2, r2, #32
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e007      	b.n	8002a22 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e006      	b.n	8002a34 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d002      	beq.n	8002a5c <HAL_CAN_ActivateNotification+0x1e>
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d109      	bne.n	8002a70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6959      	ldr	r1, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e006      	b.n	8002a7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
  }
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07c      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f983 	bl	8002df6 <HAL_CAN_TxMailbox0CompleteCallback>
 8002af0:	e016      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	e00c      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	e002      	b.n	8002b20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f986 	bl	8002e2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d024      	beq.n	8002b74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f962 	bl	8002e08 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b44:	e016      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e00c      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	e002      	b.n	8002b74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f965 	bl	8002e3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d024      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f941 	bl	8002e1a <HAL_CAN_TxMailbox2CompleteCallback>
 8002b98:	e016      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bac:	e00c      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	e002      	b.n	8002bc8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f944 	bl	8002e50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2210      	movs	r2, #16
 8002bea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2208      	movs	r2, #8
 8002c06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f92a 	bl	8002e62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fee4 	bl	80019f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f90a 	bl	8002e86 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f8f2 	bl	8002e74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8f3 	bl	8002e98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8eb 	bl	8002eaa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07b      	beq.n	8002dd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d072      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d043      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03e      	beq.n	8002dce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d56:	2b60      	cmp	r3, #96	; 0x60
 8002d58:	d02b      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x32a>
 8002d5a:	2b60      	cmp	r3, #96	; 0x60
 8002d5c:	d82e      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d5e:	2b50      	cmp	r3, #80	; 0x50
 8002d60:	d022      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x320>
 8002d62:	2b50      	cmp	r3, #80	; 0x50
 8002d64:	d82a      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	d019      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x316>
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d826      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d6e:	2b30      	cmp	r3, #48	; 0x30
 8002d70:	d010      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x30c>
 8002d72:	2b30      	cmp	r3, #48	; 0x30
 8002d74:	d822      	bhi.n	8002dbc <HAL_CAN_IRQHandler+0x334>
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d002      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x2f8>
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d005      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d7e:	e01d      	b.n	8002dbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d88:	e019      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f043 0310 	orr.w	r3, r3, #16
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d92:	e014      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d9c:	e00f      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da6:	e00a      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db0:	e005      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dba:	e000      	b.n	8002dbe <HAL_CAN_IRQHandler+0x336>
            break;
 8002dbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f867 	bl	8002ebc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4906      	ldr	r1, [pc, #24]	; (8002f68 <__NVIC_EnableIRQ+0x34>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100

08002f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db0a      	blt.n	8002f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	490c      	ldr	r1, [pc, #48]	; (8002fb8 <__NVIC_SetPriority+0x4c>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	440b      	add	r3, r1
 8002f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f94:	e00a      	b.n	8002fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4908      	ldr	r1, [pc, #32]	; (8002fbc <__NVIC_SetPriority+0x50>)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	3b04      	subs	r3, #4
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	440b      	add	r3, r1
 8002faa:	761a      	strb	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f1c3 0307 	rsb	r3, r3, #7
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf28      	it	cs
 8002fde:	2304      	movcs	r3, #4
 8002fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d902      	bls.n	8002ff0 <NVIC_EncodePriority+0x30>
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3b03      	subs	r3, #3
 8002fee:	e000      	b.n	8002ff2 <NVIC_EncodePriority+0x32>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	401a      	ands	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	43d9      	mvns	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	4313      	orrs	r3, r2
         );
}
 800301a:	4618      	mov	r0, r3
 800301c:	3724      	adds	r7, #36	; 0x24
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003048:	f7ff ff90 	bl	8002f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff2d 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff42 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ff90 	bl	8002fc0 <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff5f 	bl	8002f6c <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff35 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffa2 	bl	8003024 <SysTick_Config>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d005      	beq.n	800310e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e051      	b.n	80031b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 020e 	bic.w	r2, r2, #14
 800311c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_DMA_Abort_IT+0xd0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d029      	beq.n	800318c <HAL_DMA_Abort_IT+0xa0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <HAL_DMA_Abort_IT+0xd4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_Abort_IT+0x9c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_DMA_Abort_IT+0xd8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01a      	beq.n	8003182 <HAL_DMA_Abort_IT+0x96>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_DMA_Abort_IT+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d012      	beq.n	800317c <HAL_DMA_Abort_IT+0x90>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <HAL_DMA_Abort_IT+0xe0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00a      	beq.n	8003176 <HAL_DMA_Abort_IT+0x8a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1a      	ldr	r2, [pc, #104]	; (80031d0 <HAL_DMA_Abort_IT+0xe4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d102      	bne.n	8003170 <HAL_DMA_Abort_IT+0x84>
 800316a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800316e:	e00e      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 8003170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003174:	e00b      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 8003176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317a:	e008      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003180:	e005      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 8003182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003186:	e002      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 8003188:	2310      	movs	r3, #16
 800318a:	e000      	b.n	800318e <HAL_DMA_Abort_IT+0xa2>
 800318c:	2301      	movs	r3, #1
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_DMA_Abort_IT+0xe8>)
 8003190:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
    } 
  }
  return status;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40020008 	.word	0x40020008
 80031c0:	4002001c 	.word	0x4002001c
 80031c4:	40020030 	.word	0x40020030
 80031c8:	40020044 	.word	0x40020044
 80031cc:	40020058 	.word	0x40020058
 80031d0:	4002006c 	.word	0x4002006c
 80031d4:	40020000 	.word	0x40020000

080031d8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b08b      	sub	sp, #44	; 0x2c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003202:	e169      	b.n	80034d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003204:	2201      	movs	r2, #1
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	f040 8158 	bne.w	80034d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a9a      	ldr	r2, [pc, #616]	; (8003490 <HAL_GPIO_Init+0x2a0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d05e      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
 800322c:	4a98      	ldr	r2, [pc, #608]	; (8003490 <HAL_GPIO_Init+0x2a0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d875      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 8003232:	4a98      	ldr	r2, [pc, #608]	; (8003494 <HAL_GPIO_Init+0x2a4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d058      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
 8003238:	4a96      	ldr	r2, [pc, #600]	; (8003494 <HAL_GPIO_Init+0x2a4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d86f      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 800323e:	4a96      	ldr	r2, [pc, #600]	; (8003498 <HAL_GPIO_Init+0x2a8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d052      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
 8003244:	4a94      	ldr	r2, [pc, #592]	; (8003498 <HAL_GPIO_Init+0x2a8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d869      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 800324a:	4a94      	ldr	r2, [pc, #592]	; (800349c <HAL_GPIO_Init+0x2ac>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d04c      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
 8003250:	4a92      	ldr	r2, [pc, #584]	; (800349c <HAL_GPIO_Init+0x2ac>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d863      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 8003256:	4a92      	ldr	r2, [pc, #584]	; (80034a0 <HAL_GPIO_Init+0x2b0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d046      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
 800325c:	4a90      	ldr	r2, [pc, #576]	; (80034a0 <HAL_GPIO_Init+0x2b0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d85d      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 8003262:	2b12      	cmp	r3, #18
 8003264:	d82a      	bhi.n	80032bc <HAL_GPIO_Init+0xcc>
 8003266:	2b12      	cmp	r3, #18
 8003268:	d859      	bhi.n	800331e <HAL_GPIO_Init+0x12e>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_GPIO_Init+0x80>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	080032eb 	.word	0x080032eb
 8003274:	080032c5 	.word	0x080032c5
 8003278:	080032d7 	.word	0x080032d7
 800327c:	08003319 	.word	0x08003319
 8003280:	0800331f 	.word	0x0800331f
 8003284:	0800331f 	.word	0x0800331f
 8003288:	0800331f 	.word	0x0800331f
 800328c:	0800331f 	.word	0x0800331f
 8003290:	0800331f 	.word	0x0800331f
 8003294:	0800331f 	.word	0x0800331f
 8003298:	0800331f 	.word	0x0800331f
 800329c:	0800331f 	.word	0x0800331f
 80032a0:	0800331f 	.word	0x0800331f
 80032a4:	0800331f 	.word	0x0800331f
 80032a8:	0800331f 	.word	0x0800331f
 80032ac:	0800331f 	.word	0x0800331f
 80032b0:	0800331f 	.word	0x0800331f
 80032b4:	080032cd 	.word	0x080032cd
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	4a79      	ldr	r2, [pc, #484]	; (80034a4 <HAL_GPIO_Init+0x2b4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032c2:	e02c      	b.n	800331e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	623b      	str	r3, [r7, #32]
          break;
 80032ca:	e029      	b.n	8003320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	623b      	str	r3, [r7, #32]
          break;
 80032d4:	e024      	b.n	8003320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	3308      	adds	r3, #8
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e01f      	b.n	8003320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	330c      	adds	r3, #12
 80032e6:	623b      	str	r3, [r7, #32]
          break;
 80032e8:	e01a      	b.n	8003320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032f2:	2304      	movs	r3, #4
 80032f4:	623b      	str	r3, [r7, #32]
          break;
 80032f6:	e013      	b.n	8003320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003300:	2308      	movs	r3, #8
 8003302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	611a      	str	r2, [r3, #16]
          break;
 800330a:	e009      	b.n	8003320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800330c:	2308      	movs	r3, #8
 800330e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	615a      	str	r2, [r3, #20]
          break;
 8003316:	e003      	b.n	8003320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
          break;
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x130>
          break;
 800331e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2bff      	cmp	r3, #255	; 0xff
 8003324:	d801      	bhi.n	800332a <HAL_GPIO_Init+0x13a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	e001      	b.n	800332e <HAL_GPIO_Init+0x13e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2bff      	cmp	r3, #255	; 0xff
 8003334:	d802      	bhi.n	800333c <HAL_GPIO_Init+0x14c>
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	e002      	b.n	8003342 <HAL_GPIO_Init+0x152>
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	3b08      	subs	r3, #8
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	210f      	movs	r1, #15
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	6a39      	ldr	r1, [r7, #32]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	431a      	orrs	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80b1 	beq.w	80034d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_GPIO_Init+0x2b8>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4a4c      	ldr	r2, [pc, #304]	; (80034a8 <HAL_GPIO_Init+0x2b8>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6193      	str	r3, [r2, #24]
 800337c:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_GPIO_Init+0x2b8>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003388:	4a48      	ldr	r2, [pc, #288]	; (80034ac <HAL_GPIO_Init+0x2bc>)
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <HAL_GPIO_Init+0x2c0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_GPIO_Init+0x1ec>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <HAL_GPIO_Init+0x2c4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00d      	beq.n	80033d8 <HAL_GPIO_Init+0x1e8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3e      	ldr	r2, [pc, #248]	; (80034b8 <HAL_GPIO_Init+0x2c8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <HAL_GPIO_Init+0x1e4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <HAL_GPIO_Init+0x2cc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_GPIO_Init+0x1e0>
 80033cc:	2303      	movs	r3, #3
 80033ce:	e006      	b.n	80033de <HAL_GPIO_Init+0x1ee>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e004      	b.n	80033de <HAL_GPIO_Init+0x1ee>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e002      	b.n	80033de <HAL_GPIO_Init+0x1ee>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_GPIO_Init+0x1ee>
 80033dc:	2300      	movs	r3, #0
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	f002 0203 	and.w	r2, r2, #3
 80033e4:	0092      	lsls	r2, r2, #2
 80033e6:	4093      	lsls	r3, r2
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ee:	492f      	ldr	r1, [pc, #188]	; (80034ac <HAL_GPIO_Init+0x2bc>)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	3302      	adds	r3, #2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	492c      	ldr	r1, [pc, #176]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003416:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	43db      	mvns	r3, r3
 800341e:	4928      	ldr	r1, [pc, #160]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003420:	4013      	ands	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4922      	ldr	r1, [pc, #136]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	43db      	mvns	r3, r3
 8003446:	491e      	ldr	r1, [pc, #120]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003448:	4013      	ands	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d006      	beq.n	8003466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4918      	ldr	r1, [pc, #96]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	43db      	mvns	r3, r3
 800346e:	4914      	ldr	r1, [pc, #80]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003470:	4013      	ands	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d021      	beq.n	80034c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	490e      	ldr	r1, [pc, #56]	; (80034c0 <HAL_GPIO_Init+0x2d0>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	60cb      	str	r3, [r1, #12]
 800348c:	e021      	b.n	80034d2 <HAL_GPIO_Init+0x2e2>
 800348e:	bf00      	nop
 8003490:	10320000 	.word	0x10320000
 8003494:	10310000 	.word	0x10310000
 8003498:	10220000 	.word	0x10220000
 800349c:	10210000 	.word	0x10210000
 80034a0:	10120000 	.word	0x10120000
 80034a4:	10110000 	.word	0x10110000
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010000 	.word	0x40010000
 80034b0:	40010800 	.word	0x40010800
 80034b4:	40010c00 	.word	0x40010c00
 80034b8:	40011000 	.word	0x40011000
 80034bc:	40011400 	.word	0x40011400
 80034c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_GPIO_Init+0x304>)
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <HAL_GPIO_Init+0x304>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	3301      	adds	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f ae8e 	bne.w	8003204 <HAL_GPIO_Init+0x14>
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	372c      	adds	r7, #44	; 0x2c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003514:	e003      	b.n	800351e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003516:	887b      	ldrh	r3, [r7, #2]
 8003518:	041a      	lsls	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353e:	4a05      	ldr	r2, [pc, #20]	; (8003554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f9f0 	bl	800192c <HAL_GPIO_EXTI_Callback>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e12b      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fd9a 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035bc:	f002 ff56 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a81      	ldr	r2, [pc, #516]	; (80037cc <HAL_I2C_Init+0x274>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d807      	bhi.n	80035dc <HAL_I2C_Init+0x84>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a80      	ldr	r2, [pc, #512]	; (80037d0 <HAL_I2C_Init+0x278>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e006      	b.n	80035ea <HAL_I2C_Init+0x92>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a7d      	ldr	r2, [pc, #500]	; (80037d4 <HAL_I2C_Init+0x27c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	bf94      	ite	ls
 80035e4:	2301      	movls	r3, #1
 80035e6:	2300      	movhi	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0e7      	b.n	80037c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a78      	ldr	r2, [pc, #480]	; (80037d8 <HAL_I2C_Init+0x280>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_I2C_Init+0x274>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d802      	bhi.n	800362c <HAL_I2C_Init+0xd4>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	e009      	b.n	8003640 <HAL_I2C_Init+0xe8>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	4a69      	ldr	r2, [pc, #420]	; (80037dc <HAL_I2C_Init+0x284>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	3301      	adds	r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	495c      	ldr	r1, [pc, #368]	; (80037cc <HAL_I2C_Init+0x274>)
 800365c:	428b      	cmp	r3, r1
 800365e:	d819      	bhi.n	8003694 <HAL_I2C_Init+0x13c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1e59      	subs	r1, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fbb1 f3f3 	udiv	r3, r1, r3
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003674:	400b      	ands	r3, r1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_I2C_Init+0x138>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e59      	subs	r1, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fbb1 f3f3 	udiv	r3, r1, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	e051      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003690:	2304      	movs	r3, #4
 8003692:	e04f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d111      	bne.n	80036c0 <HAL_I2C_Init+0x168>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e012      	b.n	80036e6 <HAL_I2C_Init+0x18e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Init+0x196>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e022      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_I2C_Init+0x1bc>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e58      	subs	r0, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6859      	ldr	r1, [r3, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	440b      	add	r3, r1
 8003704:	fbb0 f3f3 	udiv	r3, r0, r3
 8003708:	3301      	adds	r3, #1
 800370a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	e00f      	b.n	8003734 <HAL_I2C_Init+0x1dc>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1e58      	subs	r0, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	0099      	lsls	r1, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	fbb0 f3f3 	udiv	r3, r0, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6809      	ldr	r1, [r1, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6911      	ldr	r1, [r2, #16]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68d2      	ldr	r2, [r2, #12]
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	000186a0 	.word	0x000186a0
 80037d0:	001e847f 	.word	0x001e847f
 80037d4:	003d08ff 	.word	0x003d08ff
 80037d8:	431bde83 	.word	0x431bde83
 80037dc:	10624dd3 	.word	0x10624dd3

080037e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fa:	f7fe fdfd 	bl	80023f8 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	f040 80d9 	bne.w	80039c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2319      	movs	r3, #25
 8003814:	2201      	movs	r2, #1
 8003816:	496d      	ldr	r1, [pc, #436]	; (80039cc <HAL_I2C_Mem_Write+0x1ec>)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f002 f82b 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	e0cc      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_I2C_Mem_Write+0x56>
 8003832:	2302      	movs	r3, #2
 8003834:	e0c5      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d007      	beq.n	800385c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2221      	movs	r2, #33	; 0x21
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800388c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_I2C_Mem_Write+0x1f0>)
 800389c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800389e:	88f8      	ldrh	r0, [r7, #6]
 80038a0:	893a      	ldrh	r2, [r7, #8]
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4603      	mov	r3, r0
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f001 fdba 	bl	8005428 <I2C_RequestMemoryWrite>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d052      	beq.n	8003960 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e081      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f002 f8ac 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11b      	bne.n	8003960 <HAL_I2C_Mem_Write+0x180>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1aa      	bne.n	80038be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f002 f898 	bl	8005aa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b04      	cmp	r3, #4
 800397e:	d107      	bne.n	8003990 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e016      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	00100002 	.word	0x00100002
 80039d0:	ffff0000 	.word	0xffff0000

080039d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039f2:	f7fe fd01 	bl	80023f8 <HAL_GetTick>
 80039f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	f040 8244 	bne.w	8003e8e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2319      	movs	r3, #25
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4982      	ldr	r1, [pc, #520]	; (8003c18 <HAL_I2C_Mem_Read+0x244>)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f001 ff2f 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e237      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x5a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e230      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d007      	beq.n	8003a54 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2222      	movs	r2, #34	; 0x22
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a62      	ldr	r2, [pc, #392]	; (8003c1c <HAL_I2C_Mem_Read+0x248>)
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a96:	88f8      	ldrh	r0, [r7, #6]
 8003a98:	893a      	ldrh	r2, [r7, #8]
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f001 fd54 	bl	8005554 <I2C_RequestMemoryRead>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1ec      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e1c0      	b.n	8003e68 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11e      	bne.n	8003b2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003afe:	b672      	cpsid	i
}
 8003b00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b28:	b662      	cpsie	i
}
 8003b2a:	e035      	b.n	8003b98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11e      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b44:	b672      	cpsid	i
}
 8003b46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b6e:	b662      	cpsie	i
}
 8003b70:	e012      	b.n	8003b98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b98:	e166      	b.n	8003e68 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	f200 811f 	bhi.w	8003de2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d123      	bne.n	8003bf4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f001 ffe9 	bl	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e167      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf2:	e139      	b.n	8003e68 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d152      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	2200      	movs	r2, #0
 8003c04:	4906      	ldr	r1, [pc, #24]	; (8003c20 <HAL_I2C_Mem_Read+0x24c>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f001 fe34 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e13c      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
 8003c16:	bf00      	nop
 8003c18:	00100002 	.word	0x00100002
 8003c1c:	ffff0000 	.word	0xffff0000
 8003c20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c24:	b672      	cpsid	i
}
 8003c26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6a:	b662      	cpsie	i
}
 8003c6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ca0:	e0e2      	b.n	8003e68 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	2200      	movs	r2, #0
 8003caa:	497b      	ldr	r1, [pc, #492]	; (8003e98 <HAL_I2C_Mem_Read+0x4c4>)
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f001 fde1 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0e9      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ccc:	b672      	cpsid	i
}
 8003cce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d02:	4b66      	ldr	r3, [pc, #408]	; (8003e9c <HAL_I2C_Mem_Read+0x4c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	4a65      	ldr	r2, [pc, #404]	; (8003ea0 <HAL_I2C_Mem_Read+0x4cc>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a1a      	lsrs	r2, r3, #8
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00da      	lsls	r2, r3, #3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d118      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d4a:	b662      	cpsie	i
}
 8003d4c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e09a      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d1d9      	bne.n	8003d1c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003daa:	b662      	cpsie	i
}
 8003dac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de0:	e042      	b.n	8003e68 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f001 fece 	bl	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e04c      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d118      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f ae94 	bne.w	8003b9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3728      	adds	r7, #40	; 0x28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	00010004 	.word	0x00010004
 8003e9c:	200000a4 	.word	0x200000a4
 8003ea0:	14f8b589 	.word	0x14f8b589

08003ea4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d003      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x38>
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	f040 80c1 	bne.w	800405e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_I2C_EV_IRQHandler+0x6e>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003efc:	d003      	beq.n	8003f06 <HAL_I2C_EV_IRQHandler+0x62>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f04:	d101      	bne.n	8003f0a <HAL_I2C_EV_IRQHandler+0x66>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_I2C_EV_IRQHandler+0x68>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	f000 8132 	beq.w	8004176 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_I2C_EV_IRQHandler+0x92>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 feb1 	bl	8005c90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fcc8 	bl	80048c4 <I2C_Master_SB>
 8003f34:	e092      	b.n	800405c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	08db      	lsrs	r3, r3, #3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0xb2>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fd3d 	bl	80049ce <I2C_Master_ADD10>
 8003f54:	e082      	b.n	800405c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0xd2>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	0a5b      	lsrs	r3, r3, #9
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fd56 	bl	8004a20 <I2C_Master_ADDR>
 8003f74:	e072      	b.n	800405c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03b      	beq.n	8003ffa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	f000 80f3 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	09db      	lsrs	r3, r3, #7
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00f      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f942 	bl	8004242 <I2C_MasterTransmit_TXE>
 8003fbe:	e04d      	b.n	800405c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80d6 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80cf 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b21      	cmp	r3, #33	; 0x21
 8003fe0:	d103      	bne.n	8003fea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f9c9 	bl	800437a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe8:	e0c7      	b.n	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	f040 80c4 	bne.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa37 	bl	8004466 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ff8:	e0bf      	b.n	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004008:	f000 80b7 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x194>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_I2C_EV_IRQHandler+0x194>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 faac 	bl	800458e <I2C_MasterReceive_RXNE>
 8004036:	e011      	b.n	800405c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 809a 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8093 	beq.w	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb4b 	bl	80046f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405a:	e08e      	b.n	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
 800405c:	e08d      	b.n	800417a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e007      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	0a5b      	lsrs	r3, r3, #9
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00c      	beq.n	80040b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 ff0f 	bl	8004ece <I2C_Slave_ADDR>
 80040b0:	e066      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0a5b      	lsrs	r3, r3, #9
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 ff4a 	bl	8004f64 <I2C_Slave_STOPF>
 80040d0:	e056      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040d2:	7bbb      	ldrb	r3, [r7, #14]
 80040d4:	2b21      	cmp	r3, #33	; 0x21
 80040d6:	d002      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0x23a>
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	2b29      	cmp	r3, #41	; 0x29
 80040dc:	d125      	bne.n	800412a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	09db      	lsrs	r3, r3, #7
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x266>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	0a9b      	lsrs	r3, r3, #10
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x266>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fe27 	bl	8004d56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004108:	e039      	b.n	800417e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d033      	beq.n	800417e <HAL_I2C_EV_IRQHandler+0x2da>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	0a5b      	lsrs	r3, r3, #9
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02d      	beq.n	800417e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fe54 	bl	8004dd0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004128:	e029      	b.n	800417e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	099b      	lsrs	r3, r3, #6
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00f      	beq.n	8004156 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	0a9b      	lsrs	r3, r3, #10
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fe5e 	bl	8004e10 <I2C_SlaveReceive_RXNE>
 8004154:	e014      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00e      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	0a5b      	lsrs	r3, r3, #9
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fe8c 	bl	8004e8c <I2C_SlaveReceive_BTF>
 8004174:	e004      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800417e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
 80041da:	4613      	mov	r3, r2
 80041dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004250:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004258:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d150      	bne.n	800430a <I2C_MasterTransmit_TXE+0xc8>
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b21      	cmp	r3, #33	; 0x21
 800426c:	d14d      	bne.n	800430a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d01d      	beq.n	80042b0 <I2C_MasterTransmit_TXE+0x6e>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b20      	cmp	r3, #32
 8004278:	d01a      	beq.n	80042b0 <I2C_MasterTransmit_TXE+0x6e>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004280:	d016      	beq.n	80042b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004290:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2211      	movs	r2, #17
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff6c 	bl	8004186 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042ae:	e060      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d107      	bne.n	80042fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff81 	bl	80041fa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042f8:	e03b      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff3f 	bl	8004186 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004308:	e033      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d005      	beq.n	800431c <I2C_MasterTransmit_TXE+0xda>
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d12d      	bne.n	8004372 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b22      	cmp	r3, #34	; 0x22
 800431a:	d12a      	bne.n	8004372 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004336:	e01c      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d103      	bne.n	800434c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f88e 	bl	8004466 <I2C_MemoryTransmit_TXE_BTF>
}
 800434a:	e012      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004370:	e7ff      	b.n	8004372 <I2C_MasterTransmit_TXE+0x130>
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b21      	cmp	r3, #33	; 0x21
 8004392:	d164      	bne.n	800445e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80043c2:	e04c      	b.n	800445e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d01d      	beq.n	8004406 <I2C_MasterTransmit_BTF+0x8c>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d01a      	beq.n	8004406 <I2C_MasterTransmit_BTF+0x8c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043d6:	d016      	beq.n	8004406 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2211      	movs	r2, #17
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fec1 	bl	8004186 <HAL_I2C_MasterTxCpltCallback>
}
 8004404:	e02b      	b.n	800445e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004414:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d107      	bne.n	8004450 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fed6 	bl	80041fa <HAL_I2C_MemTxCpltCallback>
}
 800444e:	e006      	b.n	800445e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fe94 	bl	8004186 <HAL_I2C_MasterTxCpltCallback>
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11d      	bne.n	80044ba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10b      	bne.n	800449e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448a:	b2da      	uxtb	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800449c:	e073      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	121b      	asrs	r3, r3, #8
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044b8:	e065      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10b      	bne.n	80044da <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044d8:	e055      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d151      	bne.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b22      	cmp	r3, #34	; 0x22
 80044e6:	d10d      	bne.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004502:	e040      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d015      	beq.n	800453a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b21      	cmp	r3, #33	; 0x21
 8004512:	d112      	bne.n	800453a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004538:	e025      	b.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d120      	bne.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b21      	cmp	r3, #33	; 0x21
 8004548:	d11d      	bne.n	8004586 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004558:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004568:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fe3a 	bl	80041fa <HAL_I2C_MemTxCpltCallback>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b22      	cmp	r3, #34	; 0x22
 80045a0:	f040 80a2 	bne.w	80046e8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d921      	bls.n	80045f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	f040 8082 	bne.w	80046e8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80045f4:	e078      	b.n	80046e8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d074      	beq.n	80046e8 <I2C_MasterReceive_RXNE+0x15a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d002      	beq.n	800460a <I2C_MasterReceive_RXNE+0x7c>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d16e      	bne.n	80046e8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 fa8a 	bl	8005b24 <I2C_WaitOnSTOPRequestThroughIT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d142      	bne.n	800469c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004624:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004634:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d10a      	bne.n	8004686 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff fdc4 	bl	800420c <HAL_I2C_MemRxCpltCallback>
}
 8004684:	e030      	b.n	80046e8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2212      	movs	r2, #18
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fd7f 	bl	8004198 <HAL_I2C_MasterRxCpltCallback>
}
 800469a:	e025      	b.n	80046e8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fd9b 	bl	800421e <HAL_I2C_ErrorCallback>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800473e:	e0bd      	b.n	80048bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b03      	cmp	r3, #3
 8004748:	d129      	bne.n	800479e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b04      	cmp	r3, #4
 800475e:	d00a      	beq.n	8004776 <I2C_MasterReceive_BTF+0x86>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d007      	beq.n	8004776 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800479c:	e08e      	b.n	80048bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d176      	bne.n	8004896 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <I2C_MasterReceive_BTF+0xc4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d108      	bne.n	80047c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e019      	b.n	80047fa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d002      	beq.n	80047d2 <I2C_MasterReceive_BTF+0xe2>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d108      	bne.n	80047e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e00a      	b.n	80047fa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d007      	beq.n	80047fa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004854:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d10a      	bne.n	8004880 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fcc7 	bl	800420c <HAL_I2C_MemRxCpltCallback>
}
 800487e:	e01d      	b.n	80048bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2212      	movs	r2, #18
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff fc82 	bl	8004198 <HAL_I2C_MasterRxCpltCallback>
}
 8004894:	e012      	b.n	80048bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d117      	bne.n	8004908 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048f2:	e067      	b.n	80049c4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]
}
 8004906:	e05d      	b.n	80049c4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004910:	d133      	bne.n	800497a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b21      	cmp	r3, #33	; 0x21
 800491c:	d109      	bne.n	8004932 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800492e:	611a      	str	r2, [r3, #16]
 8004930:	e008      	b.n	8004944 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <I2C_Master_SB+0x92>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d032      	beq.n	80049c4 <I2C_Master_SB+0x100>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02d      	beq.n	80049c4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004976:	605a      	str	r2, [r3, #4]
}
 8004978:	e024      	b.n	80049c4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10e      	bne.n	80049a0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	b29b      	uxth	r3, r3
 8004988:	11db      	asrs	r3, r3, #7
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0306 	and.w	r3, r3, #6
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f063 030f 	orn	r3, r3, #15
 8004996:	b2da      	uxtb	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	611a      	str	r2, [r3, #16]
}
 800499e:	e011      	b.n	80049c4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10d      	bne.n	80049c4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	11db      	asrs	r3, r3, #7
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0306 	and.w	r3, r3, #6
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f063 030e 	orn	r3, r3, #14
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <I2C_Master_ADD10+0x26>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d108      	bne.n	8004a06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <I2C_Master_ADD10+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a14:	605a      	str	r2, [r3, #4]
  }
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b091      	sub	sp, #68	; 0x44
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b22      	cmp	r3, #34	; 0x22
 8004a48:	f040 8174 	bne.w	8004d34 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <I2C_Master_ADDR+0x54>
 8004a54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d10b      	bne.n	8004a74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	633b      	str	r3, [r7, #48]	; 0x30
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	e16b      	b.n	8004d4c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11d      	bne.n	8004ab8 <I2C_Master_ADDR+0x98>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a84:	d118      	bne.n	8004ab8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aaa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ab6:	e149      	b.n	8004d4c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d113      	bne.n	8004aea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e120      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 808a 	bne.w	8004c0a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004afc:	d137      	bne.n	8004b6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d113      	bne.n	8004b46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	e0f2      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e0de      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d02e      	beq.n	8004bd2 <I2C_Master_ADDR+0x1b2>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d02b      	beq.n	8004bd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	2b12      	cmp	r3, #18
 8004b7e:	d102      	bne.n	8004b86 <I2C_Master_ADDR+0x166>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d125      	bne.n	8004bd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d00e      	beq.n	8004baa <I2C_Master_ADDR+0x18a>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d00b      	beq.n	8004baa <I2C_Master_ADDR+0x18a>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d008      	beq.n	8004baa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e007      	b.n	8004bba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	e0ac      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e090      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d158      	bne.n	8004cc6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d021      	beq.n	8004c5e <I2C_Master_ADDR+0x23e>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d01e      	beq.n	8004c5e <I2C_Master_ADDR+0x23e>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d01b      	beq.n	8004c5e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e012      	b.n	8004c84 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c92:	d14b      	bne.n	8004d2c <I2C_Master_ADDR+0x30c>
 8004c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c9a:	d00b      	beq.n	8004cb4 <I2C_Master_ADDR+0x294>
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d008      	beq.n	8004cb4 <I2C_Master_ADDR+0x294>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d005      	beq.n	8004cb4 <I2C_Master_ADDR+0x294>
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d002      	beq.n	8004cb4 <I2C_Master_ADDR+0x294>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d13b      	bne.n	8004d2c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	e032      	b.n	8004d2c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d117      	bne.n	8004d16 <I2C_Master_ADDR+0x2f6>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cec:	d00b      	beq.n	8004d06 <I2C_Master_ADDR+0x2e6>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d008      	beq.n	8004d06 <I2C_Master_ADDR+0x2e6>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d005      	beq.n	8004d06 <I2C_Master_ADDR+0x2e6>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d002      	beq.n	8004d06 <I2C_Master_ADDR+0x2e6>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d107      	bne.n	8004d16 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d32:	e00b      	b.n	8004d4c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
}
 8004d4a:	e7ff      	b.n	8004d4c <I2C_Master_ADDR+0x32c>
 8004d4c:	bf00      	nop
 8004d4e:	3744      	adds	r7, #68	; 0x44
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02b      	beq.n	8004dc8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d114      	bne.n	8004dc8 <I2C_SlaveTransmit_TXE+0x72>
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b29      	cmp	r3, #41	; 0x29
 8004da2:	d111      	bne.n	8004dc8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2221      	movs	r2, #33	; 0x21
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2228      	movs	r2, #40	; 0x28
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f9f1 	bl	80041aa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d011      	beq.n	8004e06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr

08004e10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02c      	beq.n	8004e84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d114      	bne.n	8004e84 <I2C_SlaveReceive_RXNE+0x74>
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5e:	d111      	bne.n	8004e84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2222      	movs	r2, #34	; 0x22
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2228      	movs	r2, #40	; 0x28
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff f99c 	bl	80041bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ee8:	2b28      	cmp	r3, #40	; 0x28
 8004eea:	d127      	bne.n	8004f3c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	81bb      	strh	r3, [r7, #12]
 8004f1e:	e002      	b.n	8004f26 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f2e:	89ba      	ldrh	r2, [r7, #12]
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff f94a 	bl	80041ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f3a:	e00e      	b.n	8004f5a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f84:	2300      	movs	r3, #0
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc0:	d172      	bne.n	80050a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b22      	cmp	r3, #34	; 0x22
 8004fc6:	d002      	beq.n	8004fce <I2C_Slave_STOPF+0x6a>
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d135      	bne.n	800503a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe f8e6 	bl	80031d8 <HAL_DMA_GetState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d049      	beq.n	80050a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4a69      	ldr	r2, [pc, #420]	; (80051bc <I2C_Slave_STOPF+0x258>)
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f864 	bl	80030ec <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d03d      	beq.n	80050a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005038:	e035      	b.n	80050a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe f8b0 	bl	80031d8 <HAL_DMA_GetState>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d014      	beq.n	80050a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	4a4e      	ldr	r2, [pc, #312]	; (80051bc <I2C_Slave_STOPF+0x258>)
 8005084:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe f82e 	bl	80030ec <HAL_DMA_Abort_IT>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050a0:	4610      	mov	r0, r2
 80050a2:	4798      	blx	r3
 80050a4:	e000      	b.n	80050a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03e      	beq.n	8005130 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d112      	bne.n	80050e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d112      	bne.n	800511a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f843 	bl	80051c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800513e:	e039      	b.n	80051b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b2a      	cmp	r3, #42	; 0x2a
 8005144:	d109      	bne.n	800515a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2228      	movs	r2, #40	; 0x28
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff f831 	bl	80041bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b28      	cmp	r3, #40	; 0x28
 8005164:	d111      	bne.n	800518a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <I2C_Slave_STOPF+0x25c>)
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff f830 	bl	80041e8 <HAL_I2C_ListenCpltCallback>
}
 8005188:	e014      	b.n	80051b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	2b22      	cmp	r3, #34	; 0x22
 8005190:	d002      	beq.n	8005198 <I2C_Slave_STOPF+0x234>
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b22      	cmp	r3, #34	; 0x22
 8005196:	d10d      	bne.n	80051b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff f804 	bl	80041bc <HAL_I2C_SlaveRxCpltCallback>
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	08005725 	.word	0x08005725
 80051c0:	ffff0000 	.word	0xffff0000

080051c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d002      	beq.n	80051e8 <I2C_ITError+0x24>
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d10a      	bne.n	80051fe <I2C_ITError+0x3a>
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b22      	cmp	r3, #34	; 0x22
 80051ec:	d107      	bne.n	80051fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005204:	2b28      	cmp	r3, #40	; 0x28
 8005206:	d107      	bne.n	8005218 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2228      	movs	r2, #40	; 0x28
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005216:	e015      	b.n	8005244 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005226:	d00a      	beq.n	800523e <I2C_ITError+0x7a>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b60      	cmp	r3, #96	; 0x60
 800522c:	d007      	beq.n	800523e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005252:	d161      	bne.n	8005318 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005262:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800526c:	2b01      	cmp	r3, #1
 800526e:	d020      	beq.n	80052b2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	4a6a      	ldr	r2, [pc, #424]	; (8005420 <I2C_ITError+0x25c>)
 8005276:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	4618      	mov	r0, r3
 800527e:	f7fd ff35 	bl	80030ec <HAL_DMA_Abort_IT>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8089 	beq.w	800539c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
 80052b0:	e074      	b.n	800539c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	4a5a      	ldr	r2, [pc, #360]	; (8005420 <I2C_ITError+0x25c>)
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd ff14 	bl	80030ec <HAL_DMA_Abort_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d068      	beq.n	800539c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d10b      	bne.n	80052f0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005312:	4610      	mov	r0, r2
 8005314:	4798      	blx	r3
 8005316:	e041      	b.n	800539c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b60      	cmp	r3, #96	; 0x60
 8005322:	d125      	bne.n	8005370 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d10b      	bne.n	8005358 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe ff61 	bl	8004230 <HAL_I2C_AbortCpltCallback>
 800536e:	e015      	b.n	800539c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d10b      	bne.n	8005396 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fe ff41 	bl	800421e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10e      	bne.n	80053ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d104      	bne.n	80053ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053d8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d113      	bne.n	8005416 <I2C_ITError+0x252>
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b28      	cmp	r3, #40	; 0x28
 80053f2:	d110      	bne.n	8005416 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <I2C_ITError+0x260>)
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fe fee9 	bl	80041e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08005725 	.word	0x08005725
 8005424:	ffff0000 	.word	0xffff0000

08005428 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	4608      	mov	r0, r1
 8005432:	4611      	mov	r1, r2
 8005434:	461a      	mov	r2, r3
 8005436:	4603      	mov	r3, r0
 8005438:	817b      	strh	r3, [r7, #10]
 800543a:	460b      	mov	r3, r1
 800543c:	813b      	strh	r3, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2200      	movs	r2, #0
 800545a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fa08 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005478:	d103      	bne.n	8005482 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e05f      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	492d      	ldr	r1, [pc, #180]	; (8005550 <I2C_RequestMemoryWrite+0x128>)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fa40 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e04c      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c4:	6a39      	ldr	r1, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 faaa 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d107      	bne.n	80054ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e02b      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d105      	bne.n	8005500 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]
 80054fe:	e021      	b.n	8005544 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005500:	893b      	ldrh	r3, [r7, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005510:	6a39      	ldr	r1, [r7, #32]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fa84 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b04      	cmp	r3, #4
 8005524:	d107      	bne.n	8005536 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e005      	b.n	8005546 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800553a:	893b      	ldrh	r3, [r7, #8]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	00010002 	.word	0x00010002

08005554 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	4603      	mov	r3, r0
 8005564:	817b      	strh	r3, [r7, #10]
 8005566:	460b      	mov	r3, r1
 8005568:	813b      	strh	r3, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800557c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2200      	movs	r2, #0
 8005596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f96a 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b4:	d103      	bne.n	80055be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e0aa      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	4952      	ldr	r1, [pc, #328]	; (8005720 <I2C_RequestMemoryRead+0x1cc>)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f9a2 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e097      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fa0c 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b04      	cmp	r3, #4
 8005614:	d107      	bne.n	8005626 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e076      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005630:	893b      	ldrh	r3, [r7, #8]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	611a      	str	r2, [r3, #16]
 800563a:	e021      	b.n	8005680 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800563c:	893b      	ldrh	r3, [r7, #8]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f9e6 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00d      	beq.n	8005676 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	2b04      	cmp	r3, #4
 8005660:	d107      	bne.n	8005672 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005670:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e050      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005682:	6a39      	ldr	r1, [r7, #32]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f9cb 	bl	8005a20 <I2C_WaitOnTXEFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00d      	beq.n	80056ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	2b04      	cmp	r3, #4
 8005696:	d107      	bne.n	80056a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e035      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f8d3 	bl	8005874 <I2C_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d103      	bne.n	80056ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e013      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056f0:	897b      	ldrh	r3, [r7, #10]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	4906      	ldr	r1, [pc, #24]	; (8005720 <I2C_RequestMemoryRead+0x1cc>)
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f90b 	bl	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	00010002 	.word	0x00010002

08005724 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800573e:	4b4b      	ldr	r3, [pc, #300]	; (800586c <I2C_DMAAbort+0x148>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	08db      	lsrs	r3, r3, #3
 8005744:	4a4a      	ldr	r2, [pc, #296]	; (8005870 <I2C_DMAAbort+0x14c>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0a1a      	lsrs	r2, r3, #8
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	00da      	lsls	r2, r3, #3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800576a:	e00a      	b.n	8005782 <I2C_DMAAbort+0x5e>
    }
    count--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d0ea      	beq.n	8005758 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	2200      	movs	r2, #0
 8005790:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	2200      	movs	r2, #0
 80057a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	2200      	movs	r2, #0
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	2200      	movs	r2, #0
 80057d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d10e      	bne.n	8005812 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7fe fd10 	bl	8004230 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005810:	e027      	b.n	8005862 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005818:	2b28      	cmp	r3, #40	; 0x28
 800581a:	d117      	bne.n	800584c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800583a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2228      	movs	r2, #40	; 0x28
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800584a:	e007      	b.n	800585c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f7fe fcde 	bl	800421e <HAL_I2C_ErrorCallback>
}
 8005862:	bf00      	nop
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200000a4 	.word	0x200000a4
 8005870:	14f8b589 	.word	0x14f8b589

08005874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005884:	e025      	b.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588c:	d021      	beq.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fc fdb3 	bl	80023f8 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d116      	bne.n	80058d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e023      	b.n	800591a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d10d      	bne.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	43da      	mvns	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	e00c      	b.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	43da      	mvns	r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	429a      	cmp	r2, r3
 8005916:	d0b6      	beq.n	8005886 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005930:	e051      	b.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005940:	d123      	bne.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005950:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800595a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e046      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005990:	d021      	beq.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005992:	f7fc fd31 	bl	80023f8 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d116      	bne.n	80059d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e020      	b.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10c      	bne.n	80059fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	43da      	mvns	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4013      	ands	r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	e00b      	b.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	43da      	mvns	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d18d      	bne.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a2c:	e02d      	b.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f900 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e02d      	b.n	8005a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a44:	d021      	beq.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a46:	f7fc fcd7 	bl	80023f8 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d116      	bne.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e007      	b.n	8005a9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d1ca      	bne.n	8005a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aae:	e02d      	b.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f8bf 	bl	8005c34 <I2C_IsAcknowledgeFailed>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e02d      	b.n	8005b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac6:	d021      	beq.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac8:	f7fc fc96 	bl	80023f8 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d302      	bcc.n	8005ade <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d116      	bne.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e007      	b.n	8005b1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d1ca      	bne.n	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b38:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3c:	0a1a      	lsrs	r2, r3, #8
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d107      	bne.n	8005b62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e008      	b.n	8005b74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b70:	d0e9      	beq.n	8005b46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200000a4 	.word	0x200000a4
 8005b84:	14f8b589 	.word	0x14f8b589

08005b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b94:	e042      	b.n	8005c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d119      	bne.n	8005bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0210 	mvn.w	r2, #16
 8005bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e029      	b.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd8:	f7fc fc0e 	bl	80023f8 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e007      	b.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d1b5      	bne.n	8005b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4a:	d11b      	bne.n	8005c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ca0:	d103      	bne.n	8005caa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ca8:	e007      	b.n	8005cba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cb2:	d102      	bne.n	8005cba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e272      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8087 	beq.w	8005df2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ce4:	4b92      	ldr	r3, [pc, #584]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 030c 	and.w	r3, r3, #12
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d00c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cf0:	4b8f      	ldr	r3, [pc, #572]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d112      	bne.n	8005d22 <HAL_RCC_OscConfig+0x5e>
 8005cfc:	4b8c      	ldr	r3, [pc, #560]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d10b      	bne.n	8005d22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0a:	4b89      	ldr	r3, [pc, #548]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d06c      	beq.n	8005df0 <HAL_RCC_OscConfig+0x12c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d168      	bne.n	8005df0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e24c      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x76>
 8005d2c:	4b80      	ldr	r3, [pc, #512]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a7f      	ldr	r2, [pc, #508]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e02e      	b.n	8005d98 <HAL_RCC_OscConfig+0xd4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x98>
 8005d42:	4b7b      	ldr	r3, [pc, #492]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7a      	ldr	r2, [pc, #488]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b78      	ldr	r3, [pc, #480]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a77      	ldr	r2, [pc, #476]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e01d      	b.n	8005d98 <HAL_RCC_OscConfig+0xd4>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0xbc>
 8005d66:	4b72      	ldr	r3, [pc, #456]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a71      	ldr	r2, [pc, #452]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6e      	ldr	r2, [pc, #440]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e00b      	b.n	8005d98 <HAL_RCC_OscConfig+0xd4>
 8005d80:	4b6b      	ldr	r3, [pc, #428]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a6a      	ldr	r2, [pc, #424]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b68      	ldr	r3, [pc, #416]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a67      	ldr	r2, [pc, #412]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da0:	f7fc fb2a 	bl	80023f8 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fc fb26 	bl	80023f8 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e200      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dba:	4b5d      	ldr	r3, [pc, #372]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe4>
 8005dc6:	e014      	b.n	8005df2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fc fb16 	bl	80023f8 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fc fb12 	bl	80023f8 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	; 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e1ec      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de2:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x10c>
 8005dee:	e000      	b.n	8005df2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d063      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfe:	4b4c      	ldr	r3, [pc, #304]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e0a:	4b49      	ldr	r3, [pc, #292]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d11c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x18c>
 8005e16:	4b46      	ldr	r3, [pc, #280]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d116      	bne.n	8005e50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e22:	4b43      	ldr	r3, [pc, #268]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_RCC_OscConfig+0x176>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d001      	beq.n	8005e3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e1c0      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3a:	4b3d      	ldr	r3, [pc, #244]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4939      	ldr	r1, [pc, #228]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4e:	e03a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <HAL_RCC_OscConfig+0x270>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5e:	f7fc facb 	bl	80023f8 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e66:	f7fc fac7 	bl	80023f8 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e1a1      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e78:	4b2d      	ldr	r3, [pc, #180]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e84:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4927      	ldr	r1, [pc, #156]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]
 8005e98:	e015      	b.n	8005ec6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fc faaa 	bl	80023f8 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fc faa6 	bl	80023f8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e180      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eba:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d03a      	beq.n	8005f48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d019      	beq.n	8005f0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eda:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <HAL_RCC_OscConfig+0x274>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee0:	f7fc fa8a 	bl	80023f8 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ee8:	f7fc fa86 	bl	80023f8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e160      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f06:	2001      	movs	r0, #1
 8005f08:	f000 fac4 	bl	8006494 <RCC_Delay>
 8005f0c:	e01c      	b.n	8005f48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <HAL_RCC_OscConfig+0x274>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f14:	f7fc fa70 	bl	80023f8 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f1a:	e00f      	b.n	8005f3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1c:	f7fc fa6c 	bl	80023f8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d908      	bls.n	8005f3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e146      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	42420000 	.word	0x42420000
 8005f38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f3c:	4b92      	ldr	r3, [pc, #584]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e9      	bne.n	8005f1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a6 	beq.w	80060a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f56:	2300      	movs	r3, #0
 8005f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10d      	bne.n	8005f82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f66:	4b88      	ldr	r3, [pc, #544]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	4a87      	ldr	r2, [pc, #540]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f70:	61d3      	str	r3, [r2, #28]
 8005f72:	4b85      	ldr	r3, [pc, #532]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f82:	4b82      	ldr	r3, [pc, #520]	; (800618c <HAL_RCC_OscConfig+0x4c8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d118      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f8e:	4b7f      	ldr	r3, [pc, #508]	; (800618c <HAL_RCC_OscConfig+0x4c8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a7e      	ldr	r2, [pc, #504]	; (800618c <HAL_RCC_OscConfig+0x4c8>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9a:	f7fc fa2d 	bl	80023f8 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa2:	f7fc fa29 	bl	80023f8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b64      	cmp	r3, #100	; 0x64
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e103      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	4b75      	ldr	r3, [pc, #468]	; (800618c <HAL_RCC_OscConfig+0x4c8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x312>
 8005fc8:	4b6f      	ldr	r3, [pc, #444]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	4a6e      	ldr	r2, [pc, #440]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	6213      	str	r3, [r2, #32]
 8005fd4:	e02d      	b.n	8006032 <HAL_RCC_OscConfig+0x36e>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x334>
 8005fde:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	4a69      	ldr	r2, [pc, #420]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	6213      	str	r3, [r2, #32]
 8005fea:	4b67      	ldr	r3, [pc, #412]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	4a66      	ldr	r2, [pc, #408]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8005ff0:	f023 0304 	bic.w	r3, r3, #4
 8005ff4:	6213      	str	r3, [r2, #32]
 8005ff6:	e01c      	b.n	8006032 <HAL_RCC_OscConfig+0x36e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b05      	cmp	r3, #5
 8005ffe:	d10c      	bne.n	800601a <HAL_RCC_OscConfig+0x356>
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	4a60      	ldr	r2, [pc, #384]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006006:	f043 0304 	orr.w	r3, r3, #4
 800600a:	6213      	str	r3, [r2, #32]
 800600c:	4b5e      	ldr	r3, [pc, #376]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	4a5d      	ldr	r2, [pc, #372]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	6213      	str	r3, [r2, #32]
 8006018:	e00b      	b.n	8006032 <HAL_RCC_OscConfig+0x36e>
 800601a:	4b5b      	ldr	r3, [pc, #364]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	4a5a      	ldr	r2, [pc, #360]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	6213      	str	r3, [r2, #32]
 8006026:	4b58      	ldr	r3, [pc, #352]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	4a57      	ldr	r2, [pc, #348]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800602c:	f023 0304 	bic.w	r3, r3, #4
 8006030:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d015      	beq.n	8006066 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603a:	f7fc f9dd 	bl	80023f8 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006040:	e00a      	b.n	8006058 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006042:	f7fc f9d9 	bl	80023f8 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e0b1      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006058:	4b4b      	ldr	r3, [pc, #300]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0ee      	beq.n	8006042 <HAL_RCC_OscConfig+0x37e>
 8006064:	e014      	b.n	8006090 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006066:	f7fc f9c7 	bl	80023f8 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800606c:	e00a      	b.n	8006084 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fc f9c3 	bl	80023f8 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e09b      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006084:	4b40      	ldr	r3, [pc, #256]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1ee      	bne.n	800606e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8087 	beq.w	80061ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ac:	4b36      	ldr	r3, [pc, #216]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d061      	beq.n	800617c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d146      	bne.n	800614e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c0:	4b33      	ldr	r3, [pc, #204]	; (8006190 <HAL_RCC_OscConfig+0x4cc>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c6:	f7fc f997 	bl	80023f8 <HAL_GetTick>
 80060ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ce:	f7fc f993 	bl	80023f8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e06d      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060e0:	4b29      	ldr	r3, [pc, #164]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1f0      	bne.n	80060ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d108      	bne.n	8006108 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	4921      	ldr	r1, [pc, #132]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006104:	4313      	orrs	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006108:	4b1f      	ldr	r3, [pc, #124]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a19      	ldr	r1, [r3, #32]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	430b      	orrs	r3, r1
 800611a:	491b      	ldr	r1, [pc, #108]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 800611c:	4313      	orrs	r3, r2
 800611e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_RCC_OscConfig+0x4cc>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fc f967 	bl	80023f8 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fc f963 	bl	80023f8 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e03d      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006140:	4b11      	ldr	r3, [pc, #68]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x46a>
 800614c:	e035      	b.n	80061ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <HAL_RCC_OscConfig+0x4cc>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fc f950 	bl	80023f8 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615c:	f7fc f94c 	bl	80023f8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e026      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_RCC_OscConfig+0x4c4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x498>
 800617a:	e01e      	b.n	80061ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d107      	bne.n	8006194 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e019      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
 8006190:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_OscConfig+0x500>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d106      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d001      	beq.n	80061ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40021000 	.word	0x40021000

080061c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0d0      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061dc:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d910      	bls.n	800620c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b67      	ldr	r3, [pc, #412]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f023 0207 	bic.w	r2, r3, #7
 80061f2:	4965      	ldr	r1, [pc, #404]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fa:	4b63      	ldr	r3, [pc, #396]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0b8      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d020      	beq.n	800625a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a58      	ldr	r2, [pc, #352]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 800622a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800622e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800623c:	4b53      	ldr	r3, [pc, #332]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a52      	ldr	r2, [pc, #328]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006248:	4b50      	ldr	r3, [pc, #320]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	494d      	ldr	r1, [pc, #308]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006256:	4313      	orrs	r3, r2
 8006258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d040      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	4b47      	ldr	r3, [pc, #284]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d115      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e07f      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d107      	bne.n	8006296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006286:	4b41      	ldr	r3, [pc, #260]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e073      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006296:	4b3d      	ldr	r3, [pc, #244]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e06b      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f023 0203 	bic.w	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4936      	ldr	r1, [pc, #216]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b8:	f7fc f89e 	bl	80023f8 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	e00a      	b.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c0:	f7fc f89a 	bl	80023f8 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e053      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	4b2d      	ldr	r3, [pc, #180]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 020c 	and.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1eb      	bne.n	80062c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062e8:	4b27      	ldr	r3, [pc, #156]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d210      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 0207 	bic.w	r2, r3, #7
 80062fe:	4922      	ldr	r1, [pc, #136]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e032      	b.n	800637e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006324:	4b19      	ldr	r3, [pc, #100]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4916      	ldr	r1, [pc, #88]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	490e      	ldr	r1, [pc, #56]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006356:	f000 f821 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800635a:	4602      	mov	r2, r0
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	490a      	ldr	r1, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x1c8>)
 8006368:	5ccb      	ldrb	r3, [r1, r3]
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <HAL_RCC_ClockConfig+0x1cc>)
 8006370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_RCC_ClockConfig+0x1d0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb fffc 	bl	8002374 <HAL_InitTick>

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40022000 	.word	0x40022000
 800638c:	40021000 	.word	0x40021000
 8006390:	08007b30 	.word	0x08007b30
 8006394:	200000a4 	.word	0x200000a4
 8006398:	200000a8 	.word	0x200000a8

0800639c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	b490      	push	{r4, r7}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063a2:	4b29      	ldr	r3, [pc, #164]	; (8006448 <HAL_RCC_GetSysClockFreq+0xac>)
 80063a4:	1d3c      	adds	r4, r7, #4
 80063a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063ac:	f240 2301 	movw	r3, #513	; 0x201
 80063b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063c6:	4b21      	ldr	r3, [pc, #132]	; (800644c <HAL_RCC_GetSysClockFreq+0xb0>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 030c 	and.w	r3, r3, #12
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d002      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x40>
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d003      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x46>
 80063da:	e02b      	b.n	8006434 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063dc:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063de:	623b      	str	r3, [r7, #32]
      break;
 80063e0:	e02b      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	0c9b      	lsrs	r3, r3, #18
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	3328      	adds	r3, #40	; 0x28
 80063ec:	443b      	add	r3, r7
 80063ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d012      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	0c5b      	lsrs	r3, r3, #17
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	3328      	adds	r3, #40	; 0x28
 800640a:	443b      	add	r3, r7
 800640c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006410:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4a0e      	ldr	r2, [pc, #56]	; (8006450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006416:	fb03 f202 	mul.w	r2, r3, r2
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	e004      	b.n	800642e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4a0b      	ldr	r2, [pc, #44]	; (8006454 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	623b      	str	r3, [r7, #32]
      break;
 8006432:	e002      	b.n	800643a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006436:	623b      	str	r3, [r7, #32]
      break;
 8006438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800643a:	6a3b      	ldr	r3, [r7, #32]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3728      	adds	r7, #40	; 0x28
 8006440:	46bd      	mov	sp, r7
 8006442:	bc90      	pop	{r4, r7}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	08007b20 	.word	0x08007b20
 800644c:	40021000 	.word	0x40021000
 8006450:	007a1200 	.word	0x007a1200
 8006454:	003d0900 	.word	0x003d0900

08006458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800645c:	4b02      	ldr	r3, [pc, #8]	; (8006468 <HAL_RCC_GetHCLKFreq+0x10>)
 800645e:	681b      	ldr	r3, [r3, #0]
}
 8006460:	4618      	mov	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	200000a4 	.word	0x200000a4

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006470:	f7ff fff2 	bl	8006458 <HAL_RCC_GetHCLKFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	0a1b      	lsrs	r3, r3, #8
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	4903      	ldr	r1, [pc, #12]	; (8006490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	08007b40 	.word	0x08007b40

08006494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <RCC_Delay+0x34>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <RCC_Delay+0x38>)
 80064a2:	fba2 2303 	umull	r2, r3, r2, r3
 80064a6:	0a5b      	lsrs	r3, r3, #9
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064b0:	bf00      	nop
  }
  while (Delay --);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1e5a      	subs	r2, r3, #1
 80064b6:	60fa      	str	r2, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f9      	bne.n	80064b0 <RCC_Delay+0x1c>
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	200000a4 	.word	0x200000a4
 80064cc:	10624dd3 	.word	0x10624dd3

080064d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fb fe24 	bl	8002144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 fc28 	bl	8006d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d001      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e03a      	b.n	80065fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_TIM_Base_Start_IT+0x98>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x58>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d009      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x58>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_TIM_Base_Start_IT+0x9c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_TIM_Base_Start_IT+0x58>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a13      	ldr	r2, [pc, #76]	; (8006610 <HAL_TIM_Base_Start_IT+0xa0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d111      	bne.n	80065ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d010      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	e007      	b.n	80065fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800

08006614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e041      	b.n	80066aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f839 	bl	80066b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 fb86 	bl	8006d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_TIM_PWM_Start+0x24>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e022      	b.n	800672e <HAL_TIM_PWM_Start+0x6a>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d109      	bne.n	8006702 <HAL_TIM_PWM_Start+0x3e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e015      	b.n	800672e <HAL_TIM_PWM_Start+0x6a>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d109      	bne.n	800671c <HAL_TIM_PWM_Start+0x58>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	e008      	b.n	800672e <HAL_TIM_PWM_Start+0x6a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	bf14      	ite	ne
 8006728:	2301      	movne	r3, #1
 800672a:	2300      	moveq	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e05e      	b.n	80067f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <HAL_TIM_PWM_Start+0x82>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006744:	e013      	b.n	800676e <HAL_TIM_PWM_Start+0xaa>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b04      	cmp	r3, #4
 800674a:	d104      	bne.n	8006756 <HAL_TIM_PWM_Start+0x92>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006754:	e00b      	b.n	800676e <HAL_TIM_PWM_Start+0xaa>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d104      	bne.n	8006766 <HAL_TIM_PWM_Start+0xa2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006764:	e003      	b.n	800676e <HAL_TIM_PWM_Start+0xaa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2201      	movs	r2, #1
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fd74 	bl	8007264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <HAL_TIM_PWM_Start+0x138>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d107      	bne.n	8006796 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a18      	ldr	r2, [pc, #96]	; (80067fc <HAL_TIM_PWM_Start+0x138>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_TIM_PWM_Start+0xfa>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d009      	beq.n	80067be <HAL_TIM_PWM_Start+0xfa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a14      	ldr	r2, [pc, #80]	; (8006800 <HAL_TIM_PWM_Start+0x13c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_TIM_PWM_Start+0xfa>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a12      	ldr	r2, [pc, #72]	; (8006804 <HAL_TIM_PWM_Start+0x140>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d111      	bne.n	80067e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b06      	cmp	r3, #6
 80067ce:	d010      	beq.n	80067f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e0:	e007      	b.n	80067f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0201 	orr.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800

08006808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b02      	cmp	r3, #2
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0202 	mvn.w	r2, #2
 8006834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa6f 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa62 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa71 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b04      	cmp	r3, #4
 8006870:	d122      	bne.n	80068b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d11b      	bne.n	80068b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0204 	mvn.w	r2, #4
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa45 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa38 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa47 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0208 	mvn.w	r2, #8
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2204      	movs	r2, #4
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa1b 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa0e 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fa1d 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b10      	cmp	r3, #16
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b10      	cmp	r3, #16
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0210 	mvn.w	r2, #16
 8006930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2208      	movs	r2, #8
 8006936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9f1 	bl	8006d2e <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9e4 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f9f3 	bl	8006d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b01      	cmp	r3, #1
 800696c:	d10e      	bne.n	800698c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0201 	mvn.w	r2, #1
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fa ffe6 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006996:	2b80      	cmp	r3, #128	; 0x80
 8006998:	d10e      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d107      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fd32 	bl	800741c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d10e      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b40      	cmp	r3, #64	; 0x40
 80069d2:	d107      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9b7 	bl	8006d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	d10e      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d107      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0220 	mvn.w	r2, #32
 8006a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fcfd 	bl	800740a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d101      	bne.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	e0ac      	b.n	8006b8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b0c      	cmp	r3, #12
 8006a3e:	f200 809f 	bhi.w	8006b80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a7d 	.word	0x08006a7d
 8006a4c:	08006b81 	.word	0x08006b81
 8006a50:	08006b81 	.word	0x08006b81
 8006a54:	08006b81 	.word	0x08006b81
 8006a58:	08006abd 	.word	0x08006abd
 8006a5c:	08006b81 	.word	0x08006b81
 8006a60:	08006b81 	.word	0x08006b81
 8006a64:	08006b81 	.word	0x08006b81
 8006a68:	08006aff 	.word	0x08006aff
 8006a6c:	08006b81 	.word	0x08006b81
 8006a70:	08006b81 	.word	0x08006b81
 8006a74:	08006b81 	.word	0x08006b81
 8006a78:	08006b3f 	.word	0x08006b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f9d0 	bl	8006e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0208 	orr.w	r2, r2, #8
 8006a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	699a      	ldr	r2, [r3, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0204 	bic.w	r2, r2, #4
 8006aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6999      	ldr	r1, [r3, #24]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	619a      	str	r2, [r3, #24]
      break;
 8006aba:	e062      	b.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fa16 	bl	8006ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6999      	ldr	r1, [r3, #24]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	021a      	lsls	r2, r3, #8
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	619a      	str	r2, [r3, #24]
      break;
 8006afc:	e041      	b.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fa5f 	bl	8006fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0208 	orr.w	r2, r2, #8
 8006b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0204 	bic.w	r2, r2, #4
 8006b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69d9      	ldr	r1, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	61da      	str	r2, [r3, #28]
      break;
 8006b3c:	e021      	b.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 faa9 	bl	800709c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69d9      	ldr	r1, [r3, #28]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	021a      	lsls	r2, r3, #8
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	61da      	str	r2, [r3, #28]
      break;
 8006b7e:	e000      	b.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_ConfigClockSource+0x18>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e0b3      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x180>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be4:	d03e      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0xd0>
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bea:	f200 8087 	bhi.w	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	f000 8085 	beq.w	8006d00 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfa:	d87f      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006bfc:	2b70      	cmp	r3, #112	; 0x70
 8006bfe:	d01a      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0xa2>
 8006c00:	2b70      	cmp	r3, #112	; 0x70
 8006c02:	d87b      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c04:	2b60      	cmp	r3, #96	; 0x60
 8006c06:	d050      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x116>
 8006c08:	2b60      	cmp	r3, #96	; 0x60
 8006c0a:	d877      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d03c      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0xf6>
 8006c10:	2b50      	cmp	r3, #80	; 0x50
 8006c12:	d873      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d058      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x136>
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	d86f      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c1c:	2b30      	cmp	r3, #48	; 0x30
 8006c1e:	d064      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x156>
 8006c20:	2b30      	cmp	r3, #48	; 0x30
 8006c22:	d86b      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d060      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x156>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d867      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d05c      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x156>
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d05a      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006c34:	e062      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6899      	ldr	r1, [r3, #8]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f000 faee 	bl	8007226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	609a      	str	r2, [r3, #8]
      break;
 8006c62:	e04e      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6899      	ldr	r1, [r3, #8]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f000 fad7 	bl	8007226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c86:	609a      	str	r2, [r3, #8]
      break;
 8006c88:	e03b      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f000 fa4e 	bl	8007138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2150      	movs	r1, #80	; 0x50
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 faa5 	bl	80071f2 <TIM_ITRx_SetConfig>
      break;
 8006ca8:	e02b      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6859      	ldr	r1, [r3, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f000 fa6c 	bl	8007194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2160      	movs	r1, #96	; 0x60
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fa95 	bl	80071f2 <TIM_ITRx_SetConfig>
      break;
 8006cc8:	e01b      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6859      	ldr	r1, [r3, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f000 fa2e 	bl	8007138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2140      	movs	r1, #64	; 0x40
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fa85 	bl	80071f2 <TIM_ITRx_SetConfig>
      break;
 8006ce8:	e00b      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f000 fa7c 	bl	80071f2 <TIM_ITRx_SetConfig>
        break;
 8006cfa:	e002      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a29      	ldr	r2, [pc, #164]	; (8006e1c <TIM_Base_SetConfig+0xb8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x30>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x30>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <TIM_Base_SetConfig+0xbc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x30>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a25      	ldr	r2, [pc, #148]	; (8006e24 <TIM_Base_SetConfig+0xc0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <TIM_Base_SetConfig+0xb8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <TIM_Base_SetConfig+0x62>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d007      	beq.n	8006dc6 <TIM_Base_SetConfig+0x62>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <TIM_Base_SetConfig+0xbc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_Base_SetConfig+0x62>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <TIM_Base_SetConfig+0xc0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d108      	bne.n	8006dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a07      	ldr	r2, [pc, #28]	; (8006e1c <TIM_Base_SetConfig+0xb8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d103      	bne.n	8006e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	615a      	str	r2, [r3, #20]
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800

08006e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 0201 	bic.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0302 	bic.w	r3, r3, #2
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1c      	ldr	r2, [pc, #112]	; (8006ef0 <TIM_OC1_SetConfig+0xc8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d10c      	bne.n	8006e9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0308 	bic.w	r3, r3, #8
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <TIM_OC1_SetConfig+0xc8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d111      	bne.n	8006eca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	621a      	str	r2, [r3, #32]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40012c00 	.word	0x40012c00

08006ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0210 	bic.w	r2, r3, #16
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0320 	bic.w	r3, r3, #32
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <TIM_OC2_SetConfig+0xd0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d10d      	bne.n	8006f70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a14      	ldr	r2, [pc, #80]	; (8006fc4 <TIM_OC2_SetConfig+0xd0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d113      	bne.n	8006fa0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	621a      	str	r2, [r3, #32]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr
 8006fc4:	40012c00 	.word	0x40012c00

08006fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a1d      	ldr	r2, [pc, #116]	; (8007098 <TIM_OC3_SetConfig+0xd0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a14      	ldr	r2, [pc, #80]	; (8007098 <TIM_OC3_SetConfig+0xd0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d113      	bne.n	8007072 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	621a      	str	r2, [r3, #32]
}
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40012c00 	.word	0x40012c00

0800709c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	031b      	lsls	r3, r3, #12
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <TIM_OC4_SetConfig+0x98>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d109      	bne.n	8007110 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	019b      	lsls	r3, r3, #6
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	40012c00 	.word	0x40012c00

08007138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0201 	bic.w	r2, r3, #1
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 030a 	bic.w	r3, r3, #10
 8007174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	f023 0210 	bic.w	r2, r3, #16
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	031b      	lsls	r3, r3, #12
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	621a      	str	r2, [r3, #32]
}
 80071e8:	bf00      	nop
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr

080071f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	f043 0307 	orr.w	r3, r3, #7
 8007214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	60f8      	str	r0, [r7, #12]
 800722e:	60b9      	str	r1, [r7, #8]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	021a      	lsls	r2, r3, #8
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	431a      	orrs	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	609a      	str	r2, [r3, #8]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	2201      	movs	r2, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	43db      	mvns	r3, r3
 8007286:	401a      	ands	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a1a      	ldr	r2, [r3, #32]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	431a      	orrs	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e046      	b.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a16      	ldr	r2, [pc, #88]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007310:	d009      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a12      	ldr	r2, [pc, #72]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a10      	ldr	r2, [pc, #64]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10c      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800

08007368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007380:	2302      	movs	r3, #2
 8007382:	e03d      	b.n	8007400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr
	...

08007430 <__errno>:
 8007430:	4b01      	ldr	r3, [pc, #4]	; (8007438 <__errno+0x8>)
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	200000b0 	.word	0x200000b0

0800743c <__libc_init_array>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	2600      	movs	r6, #0
 8007440:	4d0c      	ldr	r5, [pc, #48]	; (8007474 <__libc_init_array+0x38>)
 8007442:	4c0d      	ldr	r4, [pc, #52]	; (8007478 <__libc_init_array+0x3c>)
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	42a6      	cmp	r6, r4
 800744a:	d109      	bne.n	8007460 <__libc_init_array+0x24>
 800744c:	f000 fb5a 	bl	8007b04 <_init>
 8007450:	2600      	movs	r6, #0
 8007452:	4d0a      	ldr	r5, [pc, #40]	; (800747c <__libc_init_array+0x40>)
 8007454:	4c0a      	ldr	r4, [pc, #40]	; (8007480 <__libc_init_array+0x44>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	42a6      	cmp	r6, r4
 800745c:	d105      	bne.n	800746a <__libc_init_array+0x2e>
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	f855 3b04 	ldr.w	r3, [r5], #4
 8007464:	4798      	blx	r3
 8007466:	3601      	adds	r6, #1
 8007468:	e7ee      	b.n	8007448 <__libc_init_array+0xc>
 800746a:	f855 3b04 	ldr.w	r3, [r5], #4
 800746e:	4798      	blx	r3
 8007470:	3601      	adds	r6, #1
 8007472:	e7f2      	b.n	800745a <__libc_init_array+0x1e>
 8007474:	08007bb8 	.word	0x08007bb8
 8007478:	08007bb8 	.word	0x08007bb8
 800747c:	08007bb8 	.word	0x08007bb8
 8007480:	08007bbc 	.word	0x08007bbc

08007484 <memset>:
 8007484:	4603      	mov	r3, r0
 8007486:	4402      	add	r2, r0
 8007488:	4293      	cmp	r3, r2
 800748a:	d100      	bne.n	800748e <memset+0xa>
 800748c:	4770      	bx	lr
 800748e:	f803 1b01 	strb.w	r1, [r3], #1
 8007492:	e7f9      	b.n	8007488 <memset+0x4>
 8007494:	0000      	movs	r0, r0
	...

08007498 <atan>:
 8007498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	4bb6      	ldr	r3, [pc, #728]	; (8007778 <atan+0x2e0>)
 800749e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80074a2:	429e      	cmp	r6, r3
 80074a4:	4604      	mov	r4, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	468b      	mov	fp, r1
 80074aa:	dd17      	ble.n	80074dc <atan+0x44>
 80074ac:	4bb3      	ldr	r3, [pc, #716]	; (800777c <atan+0x2e4>)
 80074ae:	429e      	cmp	r6, r3
 80074b0:	dc01      	bgt.n	80074b6 <atan+0x1e>
 80074b2:	d109      	bne.n	80074c8 <atan+0x30>
 80074b4:	b140      	cbz	r0, 80074c8 <atan+0x30>
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f7f8 fe4d 	bl	800015c <__adddf3>
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
 80074c6:	e005      	b.n	80074d4 <atan+0x3c>
 80074c8:	f1bb 0f00 	cmp.w	fp, #0
 80074cc:	4cac      	ldr	r4, [pc, #688]	; (8007780 <atan+0x2e8>)
 80074ce:	f300 8121 	bgt.w	8007714 <atan+0x27c>
 80074d2:	4dac      	ldr	r5, [pc, #688]	; (8007784 <atan+0x2ec>)
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4baa      	ldr	r3, [pc, #680]	; (8007788 <atan+0x2f0>)
 80074de:	429e      	cmp	r6, r3
 80074e0:	dc11      	bgt.n	8007506 <atan+0x6e>
 80074e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80074e6:	429e      	cmp	r6, r3
 80074e8:	dc0a      	bgt.n	8007500 <atan+0x68>
 80074ea:	a38b      	add	r3, pc, #556	; (adr r3, 8007718 <atan+0x280>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f8 fe34 	bl	800015c <__adddf3>
 80074f4:	2200      	movs	r2, #0
 80074f6:	4ba5      	ldr	r3, [pc, #660]	; (800778c <atan+0x2f4>)
 80074f8:	f7f9 fa76 	bl	80009e8 <__aeabi_dcmpgt>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1e9      	bne.n	80074d4 <atan+0x3c>
 8007500:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007504:	e027      	b.n	8007556 <atan+0xbe>
 8007506:	f000 f951 	bl	80077ac <fabs>
 800750a:	4ba1      	ldr	r3, [pc, #644]	; (8007790 <atan+0x2f8>)
 800750c:	4604      	mov	r4, r0
 800750e:	429e      	cmp	r6, r3
 8007510:	460d      	mov	r5, r1
 8007512:	f300 80b8 	bgt.w	8007686 <atan+0x1ee>
 8007516:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800751a:	429e      	cmp	r6, r3
 800751c:	f300 809c 	bgt.w	8007658 <atan+0x1c0>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	f7f8 fe1a 	bl	800015c <__adddf3>
 8007528:	2200      	movs	r2, #0
 800752a:	4b98      	ldr	r3, [pc, #608]	; (800778c <atan+0x2f4>)
 800752c:	f7f8 fe14 	bl	8000158 <__aeabi_dsub>
 8007530:	2200      	movs	r2, #0
 8007532:	4606      	mov	r6, r0
 8007534:	460f      	mov	r7, r1
 8007536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800753a:	4620      	mov	r0, r4
 800753c:	4629      	mov	r1, r5
 800753e:	f7f8 fe0d 	bl	800015c <__adddf3>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f9 f8e7 	bl	800071c <__aeabi_ddiv>
 800754e:	f04f 0a00 	mov.w	sl, #0
 8007552:	4604      	mov	r4, r0
 8007554:	460d      	mov	r5, r1
 8007556:	4622      	mov	r2, r4
 8007558:	462b      	mov	r3, r5
 800755a:	4620      	mov	r0, r4
 800755c:	4629      	mov	r1, r5
 800755e:	f7f8 ffb3 	bl	80004c8 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	f7f8 ffad 	bl	80004c8 <__aeabi_dmul>
 800756e:	a36c      	add	r3, pc, #432	; (adr r3, 8007720 <atan+0x288>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	4606      	mov	r6, r0
 8007576:	460f      	mov	r7, r1
 8007578:	f7f8 ffa6 	bl	80004c8 <__aeabi_dmul>
 800757c:	a36a      	add	r3, pc, #424	; (adr r3, 8007728 <atan+0x290>)
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f7f8 fdeb 	bl	800015c <__adddf3>
 8007586:	4632      	mov	r2, r6
 8007588:	463b      	mov	r3, r7
 800758a:	f7f8 ff9d 	bl	80004c8 <__aeabi_dmul>
 800758e:	a368      	add	r3, pc, #416	; (adr r3, 8007730 <atan+0x298>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f7f8 fde2 	bl	800015c <__adddf3>
 8007598:	4632      	mov	r2, r6
 800759a:	463b      	mov	r3, r7
 800759c:	f7f8 ff94 	bl	80004c8 <__aeabi_dmul>
 80075a0:	a365      	add	r3, pc, #404	; (adr r3, 8007738 <atan+0x2a0>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f7f8 fdd9 	bl	800015c <__adddf3>
 80075aa:	4632      	mov	r2, r6
 80075ac:	463b      	mov	r3, r7
 80075ae:	f7f8 ff8b 	bl	80004c8 <__aeabi_dmul>
 80075b2:	a363      	add	r3, pc, #396	; (adr r3, 8007740 <atan+0x2a8>)
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f7f8 fdd0 	bl	800015c <__adddf3>
 80075bc:	4632      	mov	r2, r6
 80075be:	463b      	mov	r3, r7
 80075c0:	f7f8 ff82 	bl	80004c8 <__aeabi_dmul>
 80075c4:	a360      	add	r3, pc, #384	; (adr r3, 8007748 <atan+0x2b0>)
 80075c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ca:	f7f8 fdc7 	bl	800015c <__adddf3>
 80075ce:	4642      	mov	r2, r8
 80075d0:	464b      	mov	r3, r9
 80075d2:	f7f8 ff79 	bl	80004c8 <__aeabi_dmul>
 80075d6:	a35e      	add	r3, pc, #376	; (adr r3, 8007750 <atan+0x2b8>)
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	4680      	mov	r8, r0
 80075de:	4689      	mov	r9, r1
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f8 ff70 	bl	80004c8 <__aeabi_dmul>
 80075e8:	a35b      	add	r3, pc, #364	; (adr r3, 8007758 <atan+0x2c0>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f8 fdb3 	bl	8000158 <__aeabi_dsub>
 80075f2:	4632      	mov	r2, r6
 80075f4:	463b      	mov	r3, r7
 80075f6:	f7f8 ff67 	bl	80004c8 <__aeabi_dmul>
 80075fa:	a359      	add	r3, pc, #356	; (adr r3, 8007760 <atan+0x2c8>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f7f8 fdaa 	bl	8000158 <__aeabi_dsub>
 8007604:	4632      	mov	r2, r6
 8007606:	463b      	mov	r3, r7
 8007608:	f7f8 ff5e 	bl	80004c8 <__aeabi_dmul>
 800760c:	a356      	add	r3, pc, #344	; (adr r3, 8007768 <atan+0x2d0>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f7f8 fda1 	bl	8000158 <__aeabi_dsub>
 8007616:	4632      	mov	r2, r6
 8007618:	463b      	mov	r3, r7
 800761a:	f7f8 ff55 	bl	80004c8 <__aeabi_dmul>
 800761e:	a354      	add	r3, pc, #336	; (adr r3, 8007770 <atan+0x2d8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	f7f8 fd98 	bl	8000158 <__aeabi_dsub>
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	f7f8 ff4c 	bl	80004c8 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4640      	mov	r0, r8
 8007636:	4649      	mov	r1, r9
 8007638:	f7f8 fd90 	bl	800015c <__adddf3>
 800763c:	4622      	mov	r2, r4
 800763e:	462b      	mov	r3, r5
 8007640:	f7f8 ff42 	bl	80004c8 <__aeabi_dmul>
 8007644:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	d144      	bne.n	80076d8 <atan+0x240>
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f8 fd81 	bl	8000158 <__aeabi_dsub>
 8007656:	e734      	b.n	80074c2 <atan+0x2a>
 8007658:	2200      	movs	r2, #0
 800765a:	4b4c      	ldr	r3, [pc, #304]	; (800778c <atan+0x2f4>)
 800765c:	f7f8 fd7c 	bl	8000158 <__aeabi_dsub>
 8007660:	2200      	movs	r2, #0
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	4620      	mov	r0, r4
 8007668:	4629      	mov	r1, r5
 800766a:	4b48      	ldr	r3, [pc, #288]	; (800778c <atan+0x2f4>)
 800766c:	f7f8 fd76 	bl	800015c <__adddf3>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f9 f850 	bl	800071c <__aeabi_ddiv>
 800767c:	f04f 0a01 	mov.w	sl, #1
 8007680:	4604      	mov	r4, r0
 8007682:	460d      	mov	r5, r1
 8007684:	e767      	b.n	8007556 <atan+0xbe>
 8007686:	4b43      	ldr	r3, [pc, #268]	; (8007794 <atan+0x2fc>)
 8007688:	429e      	cmp	r6, r3
 800768a:	da1a      	bge.n	80076c2 <atan+0x22a>
 800768c:	2200      	movs	r2, #0
 800768e:	4b42      	ldr	r3, [pc, #264]	; (8007798 <atan+0x300>)
 8007690:	f7f8 fd62 	bl	8000158 <__aeabi_dsub>
 8007694:	2200      	movs	r2, #0
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	4b3e      	ldr	r3, [pc, #248]	; (8007798 <atan+0x300>)
 80076a0:	f7f8 ff12 	bl	80004c8 <__aeabi_dmul>
 80076a4:	2200      	movs	r2, #0
 80076a6:	4b39      	ldr	r3, [pc, #228]	; (800778c <atan+0x2f4>)
 80076a8:	f7f8 fd58 	bl	800015c <__adddf3>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 f832 	bl	800071c <__aeabi_ddiv>
 80076b8:	f04f 0a02 	mov.w	sl, #2
 80076bc:	4604      	mov	r4, r0
 80076be:	460d      	mov	r5, r1
 80076c0:	e749      	b.n	8007556 <atan+0xbe>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	2000      	movs	r0, #0
 80076c8:	4934      	ldr	r1, [pc, #208]	; (800779c <atan+0x304>)
 80076ca:	f7f9 f827 	bl	800071c <__aeabi_ddiv>
 80076ce:	f04f 0a03 	mov.w	sl, #3
 80076d2:	4604      	mov	r4, r0
 80076d4:	460d      	mov	r5, r1
 80076d6:	e73e      	b.n	8007556 <atan+0xbe>
 80076d8:	4b31      	ldr	r3, [pc, #196]	; (80077a0 <atan+0x308>)
 80076da:	4e32      	ldr	r6, [pc, #200]	; (80077a4 <atan+0x30c>)
 80076dc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80076e0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80076e4:	e9da 2300 	ldrd	r2, r3, [sl]
 80076e8:	f7f8 fd36 	bl	8000158 <__aeabi_dsub>
 80076ec:	4622      	mov	r2, r4
 80076ee:	462b      	mov	r3, r5
 80076f0:	f7f8 fd32 	bl	8000158 <__aeabi_dsub>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80076fc:	f7f8 fd2c 	bl	8000158 <__aeabi_dsub>
 8007700:	f1bb 0f00 	cmp.w	fp, #0
 8007704:	4604      	mov	r4, r0
 8007706:	460d      	mov	r5, r1
 8007708:	f6bf aee4 	bge.w	80074d4 <atan+0x3c>
 800770c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007710:	461d      	mov	r5, r3
 8007712:	e6df      	b.n	80074d4 <atan+0x3c>
 8007714:	4d24      	ldr	r5, [pc, #144]	; (80077a8 <atan+0x310>)
 8007716:	e6dd      	b.n	80074d4 <atan+0x3c>
 8007718:	8800759c 	.word	0x8800759c
 800771c:	7e37e43c 	.word	0x7e37e43c
 8007720:	e322da11 	.word	0xe322da11
 8007724:	3f90ad3a 	.word	0x3f90ad3a
 8007728:	24760deb 	.word	0x24760deb
 800772c:	3fa97b4b 	.word	0x3fa97b4b
 8007730:	a0d03d51 	.word	0xa0d03d51
 8007734:	3fb10d66 	.word	0x3fb10d66
 8007738:	c54c206e 	.word	0xc54c206e
 800773c:	3fb745cd 	.word	0x3fb745cd
 8007740:	920083ff 	.word	0x920083ff
 8007744:	3fc24924 	.word	0x3fc24924
 8007748:	5555550d 	.word	0x5555550d
 800774c:	3fd55555 	.word	0x3fd55555
 8007750:	2c6a6c2f 	.word	0x2c6a6c2f
 8007754:	bfa2b444 	.word	0xbfa2b444
 8007758:	52defd9a 	.word	0x52defd9a
 800775c:	3fadde2d 	.word	0x3fadde2d
 8007760:	af749a6d 	.word	0xaf749a6d
 8007764:	3fb3b0f2 	.word	0x3fb3b0f2
 8007768:	fe231671 	.word	0xfe231671
 800776c:	3fbc71c6 	.word	0x3fbc71c6
 8007770:	9998ebc4 	.word	0x9998ebc4
 8007774:	3fc99999 	.word	0x3fc99999
 8007778:	440fffff 	.word	0x440fffff
 800777c:	7ff00000 	.word	0x7ff00000
 8007780:	54442d18 	.word	0x54442d18
 8007784:	bff921fb 	.word	0xbff921fb
 8007788:	3fdbffff 	.word	0x3fdbffff
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	3ff2ffff 	.word	0x3ff2ffff
 8007794:	40038000 	.word	0x40038000
 8007798:	3ff80000 	.word	0x3ff80000
 800779c:	bff00000 	.word	0xbff00000
 80077a0:	08007b68 	.word	0x08007b68
 80077a4:	08007b48 	.word	0x08007b48
 80077a8:	3ff921fb 	.word	0x3ff921fb

080077ac <fabs>:
 80077ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80077b0:	4770      	bx	lr

080077b2 <atan2>:
 80077b2:	f000 b825 	b.w	8007800 <__ieee754_atan2>

080077b6 <sqrt>:
 80077b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b8:	4606      	mov	r6, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	f000 f8f2 	bl	80079a4 <__ieee754_sqrt>
 80077c0:	4632      	mov	r2, r6
 80077c2:	4604      	mov	r4, r0
 80077c4:	460d      	mov	r5, r1
 80077c6:	463b      	mov	r3, r7
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 f916 	bl	80009fc <__aeabi_dcmpun>
 80077d0:	b990      	cbnz	r0, 80077f8 <sqrt+0x42>
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f9 f8e7 	bl	80009ac <__aeabi_dcmplt>
 80077de:	b158      	cbz	r0, 80077f8 <sqrt+0x42>
 80077e0:	f7ff fe26 	bl	8007430 <__errno>
 80077e4:	2321      	movs	r3, #33	; 0x21
 80077e6:	2200      	movs	r2, #0
 80077e8:	6003      	str	r3, [r0, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	4610      	mov	r0, r2
 80077ee:	4619      	mov	r1, r3
 80077f0:	f7f8 ff94 	bl	800071c <__aeabi_ddiv>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	4620      	mov	r0, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007800 <__ieee754_atan2>:
 8007800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4692      	mov	sl, r2
 8007806:	4699      	mov	r9, r3
 8007808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800780c:	461f      	mov	r7, r3
 800780e:	f1ca 0300 	rsb	r3, sl, #0
 8007812:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007998 <__ieee754_atan2+0x198>
 8007816:	ea43 030a 	orr.w	r3, r3, sl
 800781a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800781e:	4573      	cmp	r3, lr
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	d808      	bhi.n	8007838 <__ieee754_atan2+0x38>
 8007826:	4246      	negs	r6, r0
 8007828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800782c:	4306      	orrs	r6, r0
 800782e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007832:	4576      	cmp	r6, lr
 8007834:	468c      	mov	ip, r1
 8007836:	d908      	bls.n	800784a <__ieee754_atan2+0x4a>
 8007838:	4652      	mov	r2, sl
 800783a:	464b      	mov	r3, r9
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fc8c 	bl	800015c <__adddf3>
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	e019      	b.n	800787e <__ieee754_atan2+0x7e>
 800784a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800784e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007852:	ea56 060a 	orrs.w	r6, r6, sl
 8007856:	d103      	bne.n	8007860 <__ieee754_atan2+0x60>
 8007858:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	f7ff be1c 	b.w	8007498 <atan>
 8007860:	17be      	asrs	r6, r7, #30
 8007862:	f006 0602 	and.w	r6, r6, #2
 8007866:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800786a:	ea53 0100 	orrs.w	r1, r3, r0
 800786e:	d10a      	bne.n	8007886 <__ieee754_atan2+0x86>
 8007870:	2e02      	cmp	r6, #2
 8007872:	d067      	beq.n	8007944 <__ieee754_atan2+0x144>
 8007874:	2e03      	cmp	r6, #3
 8007876:	d102      	bne.n	800787e <__ieee754_atan2+0x7e>
 8007878:	a53b      	add	r5, pc, #236	; (adr r5, 8007968 <__ieee754_atan2+0x168>)
 800787a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007886:	ea52 010a 	orrs.w	r1, r2, sl
 800788a:	d106      	bne.n	800789a <__ieee754_atan2+0x9a>
 800788c:	f1bc 0f00 	cmp.w	ip, #0
 8007890:	da63      	bge.n	800795a <__ieee754_atan2+0x15a>
 8007892:	a537      	add	r5, pc, #220	; (adr r5, 8007970 <__ieee754_atan2+0x170>)
 8007894:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007898:	e7f1      	b.n	800787e <__ieee754_atan2+0x7e>
 800789a:	4572      	cmp	r2, lr
 800789c:	d10f      	bne.n	80078be <__ieee754_atan2+0xbe>
 800789e:	4293      	cmp	r3, r2
 80078a0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80078a4:	d107      	bne.n	80078b6 <__ieee754_atan2+0xb6>
 80078a6:	2e02      	cmp	r6, #2
 80078a8:	d850      	bhi.n	800794c <__ieee754_atan2+0x14c>
 80078aa:	4b3c      	ldr	r3, [pc, #240]	; (800799c <__ieee754_atan2+0x19c>)
 80078ac:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078b0:	e9d6 4500 	ldrd	r4, r5, [r6]
 80078b4:	e7e3      	b.n	800787e <__ieee754_atan2+0x7e>
 80078b6:	2e02      	cmp	r6, #2
 80078b8:	d84c      	bhi.n	8007954 <__ieee754_atan2+0x154>
 80078ba:	4b39      	ldr	r3, [pc, #228]	; (80079a0 <__ieee754_atan2+0x1a0>)
 80078bc:	e7f6      	b.n	80078ac <__ieee754_atan2+0xac>
 80078be:	4573      	cmp	r3, lr
 80078c0:	d0e4      	beq.n	800788c <__ieee754_atan2+0x8c>
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80078c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80078cc:	da20      	bge.n	8007910 <__ieee754_atan2+0x110>
 80078ce:	2f00      	cmp	r7, #0
 80078d0:	da01      	bge.n	80078d6 <__ieee754_atan2+0xd6>
 80078d2:	323c      	adds	r2, #60	; 0x3c
 80078d4:	db20      	blt.n	8007918 <__ieee754_atan2+0x118>
 80078d6:	4652      	mov	r2, sl
 80078d8:	464b      	mov	r3, r9
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f8 ff1d 	bl	800071c <__aeabi_ddiv>
 80078e2:	f7ff ff63 	bl	80077ac <fabs>
 80078e6:	f7ff fdd7 	bl	8007498 <atan>
 80078ea:	4604      	mov	r4, r0
 80078ec:	460d      	mov	r5, r1
 80078ee:	2e01      	cmp	r6, #1
 80078f0:	d015      	beq.n	800791e <__ieee754_atan2+0x11e>
 80078f2:	2e02      	cmp	r6, #2
 80078f4:	d017      	beq.n	8007926 <__ieee754_atan2+0x126>
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	d0c1      	beq.n	800787e <__ieee754_atan2+0x7e>
 80078fa:	a31f      	add	r3, pc, #124	; (adr r3, 8007978 <__ieee754_atan2+0x178>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	4620      	mov	r0, r4
 8007902:	4629      	mov	r1, r5
 8007904:	f7f8 fc28 	bl	8000158 <__aeabi_dsub>
 8007908:	a31d      	add	r3, pc, #116	; (adr r3, 8007980 <__ieee754_atan2+0x180>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	e016      	b.n	800793e <__ieee754_atan2+0x13e>
 8007910:	a51d      	add	r5, pc, #116	; (adr r5, 8007988 <__ieee754_atan2+0x188>)
 8007912:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007916:	e7ea      	b.n	80078ee <__ieee754_atan2+0xee>
 8007918:	2400      	movs	r4, #0
 800791a:	2500      	movs	r5, #0
 800791c:	e7e7      	b.n	80078ee <__ieee754_atan2+0xee>
 800791e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007922:	461d      	mov	r5, r3
 8007924:	e7ab      	b.n	800787e <__ieee754_atan2+0x7e>
 8007926:	a314      	add	r3, pc, #80	; (adr r3, 8007978 <__ieee754_atan2+0x178>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 fc12 	bl	8000158 <__aeabi_dsub>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	a111      	add	r1, pc, #68	; (adr r1, 8007980 <__ieee754_atan2+0x180>)
 800793a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800793e:	f7f8 fc0b 	bl	8000158 <__aeabi_dsub>
 8007942:	e77f      	b.n	8007844 <__ieee754_atan2+0x44>
 8007944:	a50e      	add	r5, pc, #56	; (adr r5, 8007980 <__ieee754_atan2+0x180>)
 8007946:	e9d5 4500 	ldrd	r4, r5, [r5]
 800794a:	e798      	b.n	800787e <__ieee754_atan2+0x7e>
 800794c:	a510      	add	r5, pc, #64	; (adr r5, 8007990 <__ieee754_atan2+0x190>)
 800794e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007952:	e794      	b.n	800787e <__ieee754_atan2+0x7e>
 8007954:	2400      	movs	r4, #0
 8007956:	2500      	movs	r5, #0
 8007958:	e791      	b.n	800787e <__ieee754_atan2+0x7e>
 800795a:	a50b      	add	r5, pc, #44	; (adr r5, 8007988 <__ieee754_atan2+0x188>)
 800795c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007960:	e78d      	b.n	800787e <__ieee754_atan2+0x7e>
 8007962:	bf00      	nop
 8007964:	f3af 8000 	nop.w
 8007968:	54442d18 	.word	0x54442d18
 800796c:	c00921fb 	.word	0xc00921fb
 8007970:	54442d18 	.word	0x54442d18
 8007974:	bff921fb 	.word	0xbff921fb
 8007978:	33145c07 	.word	0x33145c07
 800797c:	3ca1a626 	.word	0x3ca1a626
 8007980:	54442d18 	.word	0x54442d18
 8007984:	400921fb 	.word	0x400921fb
 8007988:	54442d18 	.word	0x54442d18
 800798c:	3ff921fb 	.word	0x3ff921fb
 8007990:	54442d18 	.word	0x54442d18
 8007994:	3fe921fb 	.word	0x3fe921fb
 8007998:	7ff00000 	.word	0x7ff00000
 800799c:	08007b88 	.word	0x08007b88
 80079a0:	08007ba0 	.word	0x08007ba0

080079a4 <__ieee754_sqrt>:
 80079a4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007b00 <__ieee754_sqrt+0x15c>
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	ea3c 0c01 	bics.w	ip, ip, r1
 80079b0:	4606      	mov	r6, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	460c      	mov	r4, r1
 80079b6:	460a      	mov	r2, r1
 80079b8:	4607      	mov	r7, r0
 80079ba:	4603      	mov	r3, r0
 80079bc:	d10f      	bne.n	80079de <__ieee754_sqrt+0x3a>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	f7f8 fd81 	bl	80004c8 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4630      	mov	r0, r6
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7f8 fbc5 	bl	800015c <__adddf3>
 80079d2:	4606      	mov	r6, r0
 80079d4:	460d      	mov	r5, r1
 80079d6:	4630      	mov	r0, r6
 80079d8:	4629      	mov	r1, r5
 80079da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079de:	2900      	cmp	r1, #0
 80079e0:	dc0e      	bgt.n	8007a00 <__ieee754_sqrt+0x5c>
 80079e2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80079e6:	ea5c 0707 	orrs.w	r7, ip, r7
 80079ea:	d0f4      	beq.n	80079d6 <__ieee754_sqrt+0x32>
 80079ec:	b141      	cbz	r1, 8007a00 <__ieee754_sqrt+0x5c>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	f7f8 fbb1 	bl	8000158 <__aeabi_dsub>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	f7f8 fe8f 	bl	800071c <__aeabi_ddiv>
 80079fe:	e7e8      	b.n	80079d2 <__ieee754_sqrt+0x2e>
 8007a00:	1521      	asrs	r1, r4, #20
 8007a02:	d075      	beq.n	8007af0 <__ieee754_sqrt+0x14c>
 8007a04:	07cc      	lsls	r4, r1, #31
 8007a06:	f04f 0400 	mov.w	r4, #0
 8007a0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a0e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007a12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a16:	bf5e      	ittt	pl
 8007a18:	0fd9      	lsrpl	r1, r3, #31
 8007a1a:	005b      	lslpl	r3, r3, #1
 8007a1c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007a20:	0fd9      	lsrs	r1, r3, #31
 8007a22:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007a26:	2516      	movs	r5, #22
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a2e:	107f      	asrs	r7, r7, #1
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	1846      	adds	r6, r0, r1
 8007a34:	4296      	cmp	r6, r2
 8007a36:	bfde      	ittt	le
 8007a38:	1b92      	suble	r2, r2, r6
 8007a3a:	1870      	addle	r0, r6, r1
 8007a3c:	1864      	addle	r4, r4, r1
 8007a3e:	0052      	lsls	r2, r2, #1
 8007a40:	3d01      	subs	r5, #1
 8007a42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007a46:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a4e:	d1f0      	bne.n	8007a32 <__ieee754_sqrt+0x8e>
 8007a50:	4629      	mov	r1, r5
 8007a52:	f04f 0e20 	mov.w	lr, #32
 8007a56:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a5a:	4282      	cmp	r2, r0
 8007a5c:	eb06 0c05 	add.w	ip, r6, r5
 8007a60:	dc02      	bgt.n	8007a68 <__ieee754_sqrt+0xc4>
 8007a62:	d113      	bne.n	8007a8c <__ieee754_sqrt+0xe8>
 8007a64:	459c      	cmp	ip, r3
 8007a66:	d811      	bhi.n	8007a8c <__ieee754_sqrt+0xe8>
 8007a68:	f1bc 0f00 	cmp.w	ip, #0
 8007a6c:	eb0c 0506 	add.w	r5, ip, r6
 8007a70:	da43      	bge.n	8007afa <__ieee754_sqrt+0x156>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	db41      	blt.n	8007afa <__ieee754_sqrt+0x156>
 8007a76:	f100 0801 	add.w	r8, r0, #1
 8007a7a:	1a12      	subs	r2, r2, r0
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	459c      	cmp	ip, r3
 8007a80:	bf88      	it	hi
 8007a82:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007a86:	eba3 030c 	sub.w	r3, r3, ip
 8007a8a:	4431      	add	r1, r6
 8007a8c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007a90:	f1be 0e01 	subs.w	lr, lr, #1
 8007a94:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007aa0:	d1db      	bne.n	8007a5a <__ieee754_sqrt+0xb6>
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	d006      	beq.n	8007ab4 <__ieee754_sqrt+0x110>
 8007aa6:	1c48      	adds	r0, r1, #1
 8007aa8:	bf0b      	itete	eq
 8007aaa:	4671      	moveq	r1, lr
 8007aac:	3101      	addne	r1, #1
 8007aae:	3401      	addeq	r4, #1
 8007ab0:	f021 0101 	bicne.w	r1, r1, #1
 8007ab4:	1063      	asrs	r3, r4, #1
 8007ab6:	0849      	lsrs	r1, r1, #1
 8007ab8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007abc:	07e2      	lsls	r2, r4, #31
 8007abe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007ac2:	bf48      	it	mi
 8007ac4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007ac8:	460e      	mov	r6, r1
 8007aca:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007ace:	e782      	b.n	80079d6 <__ieee754_sqrt+0x32>
 8007ad0:	0ada      	lsrs	r2, r3, #11
 8007ad2:	3815      	subs	r0, #21
 8007ad4:	055b      	lsls	r3, r3, #21
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d0fa      	beq.n	8007ad0 <__ieee754_sqrt+0x12c>
 8007ada:	02d5      	lsls	r5, r2, #11
 8007adc:	d50a      	bpl.n	8007af4 <__ieee754_sqrt+0x150>
 8007ade:	f1c1 0420 	rsb	r4, r1, #32
 8007ae2:	fa23 f404 	lsr.w	r4, r3, r4
 8007ae6:	1e4d      	subs	r5, r1, #1
 8007ae8:	408b      	lsls	r3, r1
 8007aea:	4322      	orrs	r2, r4
 8007aec:	1b41      	subs	r1, r0, r5
 8007aee:	e789      	b.n	8007a04 <__ieee754_sqrt+0x60>
 8007af0:	4608      	mov	r0, r1
 8007af2:	e7f0      	b.n	8007ad6 <__ieee754_sqrt+0x132>
 8007af4:	0052      	lsls	r2, r2, #1
 8007af6:	3101      	adds	r1, #1
 8007af8:	e7ef      	b.n	8007ada <__ieee754_sqrt+0x136>
 8007afa:	4680      	mov	r8, r0
 8007afc:	e7bd      	b.n	8007a7a <__ieee754_sqrt+0xd6>
 8007afe:	bf00      	nop
 8007b00:	7ff00000 	.word	0x7ff00000

08007b04 <_init>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	bf00      	nop
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr

08007b10 <_fini>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	bf00      	nop
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr
